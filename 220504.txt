1교시

if 분기문


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=chrome">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        *{
            font-family: gulim;
            font-size: 22px;
        }
        span {
            color : #C70039;
            font-size: 28px;
        }
    </style>
</head>
<body>
    <h2>if - else 제어구조</h2>
    <script>
        let temp1 = 5;
        let temp2 = 2;
        let max, min;

        if (temp1 > temp2){
            max = temp1;
            min = temp2;
        }else{
            max = temp2;
            min = temp1;    
        }

        p1("");
        p1(`큰값 : ${max}`);
        p1(`작은값: ${min}`);

        function p1(str){
            document.write("<span>")
            document.write(str);
            document.write("</span><br><br>");
        }


    </script>
</body>
</html>
switch 분기문



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=chrome">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        *{
            font-family :'Segoe UI', Tahoma, Geneva, Verdana, sans-serif
            font-size : 22px;
        }
    </style>
</head>
<body>
    <h2>switch 문 사용</h2>
    <script>
        let temp;
        temp = prompt("현재의 계절을 입력하세요\n(SPRING, 여름, 가을, 겨울)","SPRING");
        switch(temp){
            case "SPRING":
                document.write("봄이군요, 꽃을 보러 나가요");
                break;
            case "여름":
                document.write("여름이군요, 바다를 보러 나가요")
                break;
            case "가을" :
                document.write("가을이군요. 산을 보러 나가요");
                break;
            case "겨울" :
                    document.write("겨울이군요. 눈을 보러 나가요");
                break;
            default :
                    document.write("알수없는 단어입니다.");
}
    </script>
   
</body>
</html>
while 반복문


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
    *{
        font-family: gulim;
        font-size: 22px;
    }
    </style>
</head>
<body>
    <h2>while 문의 사용</h2>
    <hr>
    <script>
        let innum, i;

        innum = prompt("1부터 9사이의 수를 입력하세요", "2");
        pl(`입력한 숫자 ${innum}  에 대한 구구단<br>`);
        i = 1;
        while(i <= 9){
        pl(`${innum}  X ${i}  = ${innum * i}`);
        i++;    
    }

    function pl(str){
        document.write(`${str} <br>`);
    }
    </script>
</body>
</html>
 for 반복문


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>for 문의 사용</h2>
    <hr>
    <script>
        let innum, i;
        innum = prompt ('1부터 9 사이의 수를 입력하세요',2);
        pl(`입력된 숫자 ${innum} 에 대한 구구단 <br><br>`);

        for(let i=1; i<=9; i++){
            pl(`${innum} X ${i} = ${innum * i}`);
        }

        function pl(str){
            document.write(`${str} <br>`);
        }
    </script>
</body>
</html>
do-while 반복문




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>do-while 문의 사용</h2>
    <hr>
    <script>
        let innum, i = 1;
        innum = prompt('1부터 9 사이의 수를 입력하세요');
        pl(`입력한 숫자 ${innum}에 대한 구구단 <br><br>`);
        do{
            pl(`${innum} X ${i} = ${innum * i }`);
            i++;
        }while(i<=9);

        function pl(str){
            document.write(`${str} <br><br>`);
        }
    </script>
</body>
</html>
2교시

제어문의 중첩


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        *{
            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
            font-size : 22px;
        }

        table, th, td{
            border : 1px solid lightpink;
            border-collapse: collapse;
        }
        th{
            background-color: aliceblue;
        }
    </style>
</head>
<body>
    <h2>제어 구조의 중첩</h2>
    <hr>
    <script>
        let i, j, result;
        p('<table>');
        p('<tr>');
        for(i=2; i<=9; i++){
        p(`<th> ${i} 단 </th>`);
        }    
        p("</tr>");
        p("<tr>"); // 새로운 행 시작

        for (i=2; i<=9; i++){
        p('<td>');
        for(j=1; j<=9; j++){
        result = i * j;
        pl(`${i} X ${j} = ${result}`);
        }
        p('</td>');
        }
        p('<tr>');
        p('</table>');

        function p(str){
        document.write(str);
        }
        function pl(str){
        document.write(`${str}<br>`);
        }
    </script>
</body>
</html>





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        *{
            font-family : gulim;
            font-size : 22px;
        }
    </style>
</head>
<body>
    <h2>continue 사용</h2>
    <hr>
    <script>
        let i = 0;
        while(i<50){
            i++;
            if(i % 2 == 1) continue;
            pl(i)
        }

        function pl(str){
            document.write(`${str} <br>`);
        }
    </script>
</body>
</html>




break, javascript 파일의 include 사용

function p(str){
    document.write(str);
}

function pl(str){
    document.write(`${str} <br>`);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
    <script src="utility.js"></script>
</head>
<body>
    <h2>break의 사용</h2>
    <hr>
    <script>
        let i = 0;
        while(i<10){
            i++;
            if(i == 5) break;
            pl(i);
        }
       

    </script>
</body>
</html>
3교시


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
    <script src="utility.js"></script>
</head>
<body>
    <h2>성적 처리</h2>
    <hr>
    <script>
        let kuk = prompt('국어 점수를 입력하세요',0);
        let eng = prompt('영어 점수를 입력하세요',0);
        let mat = prompt('수학 점수를 입력하세요',0);

        let tot = parseInt(kuk) + parseInt(eng) + parseInt(mat);
        let avg = tot / 3;

        let star = '';
        for(let i=0; i < avg/10; i++){
            star = star + '★';
        }
        p("<table>");
        p("<tr><th> 점수 </th></tr>");
        p(`<tr><td> 국어: ${kuk} </td></tr>`);
        p(`<tr><td> 영어: ${eng} </td></tr>`);
        p(`<tr><td> 수학: ${mat} </td></tr>`);
        p(`<tr><td> 총점: ${tot} </td></tr>`);
        p(`<tr><td> 평균: ${avg} </td></tr>`);
        p(`<tr><td> 평가: ${star} </td></tr>`);
        p("</table>");
    </script>
</body>
</html>
4교시

function(함수)

- 매개변수가 함수에 들어가서 어떤 기능 처리 후 결과를 리턴한다.
- 모든 함수는 return value 또는 return undefined가 정의되어 있으며
  return undefined는 생략 가능하다.
- 함수 선언 :  function name(param1, param2,...){ body.... return; }
- 하나의 함수는 한가지 일을 위해 작성한다.
- 함수의 이름은 동작을 나타내는 것이 좋다. doSomething, command, verb
- 함수는 object 로 간주된다. 그러므로 변수에 할당할 수 있고, 파라미터로 전달할 수
  있고, 리턴도 가능하다. (First-class Function)



- 함수 선언 : js 엔진은 함수선언문을 맨 위로 올려준다. 함수 선언문 보다 먼저 함수를 호출할 수
                 있다 (hoisted)
- 함수 표현 : 함수를 변수에 할당하여 할당된 변수를 호출하여 함수를 실행할 수 있다.
                 함수 표현은 변수에 할당하기 전에는 함수를 호출 할 수 없다.




function printHello(){
    console.log('Hello');
}

let p = printHello();
    console.log(p);

function log(message){
    console.log(message);
}
log('hello!!!');
log(1234);

function changeName(obj){
    obj.name = 'coder';
}

const kim = {name : 'kim'};
changeName(kim);
console.log(kim);

function showMessage(message, from){
    console.log(`${message} by ${from}`);
}

showMessage('hi');

function showMessage2(message, from='unknown'){
    console.log(`${message} by ${from}`);
}

showMessage2('hi');



function printAll(...args){
    for(let i=0; i< args.length; i++){
        console.log(args[i]);
    }
    for(const arg of args){
        console.log(arg);
    }    args.forEach((arg)=>console.log(arg));
}
printAll('developer', 'coder', 'team');





function printHelo(){
    console.log('Hello');
}
printHelo();
 
function  log(message) {
    console.log(message);
}
 
log('Hello@');
log(12345);
 
// parameters
// premitive parameters : passed by value
// object parameters: passed by reference
 
function changeName(obj){
    obj.name = 'coder';
}
 
const kim = {name: 'kim'};
changeName(kim);
console.log(kim);
 
//default parameters(added in ES6)

function showMessage(message, from){
    console.log(`${message} by ${from}`);
}
 
showMessage('hi'); //from undifined
 
function showMessage2(message, from='unknown'){
    console.log(`${message} by ${from}`);
}
 
showMessage2('hi'); //from unknown 출력
 
//Rest parameters (added in ES6) : 배열형태로 전달
function printAll(...args){
    for (let i =0; i < args.length; i++){
        console.log(args[i]);
    }
 
    for(const arg of args){
        console.log(arg);
    }
 
    args.forEach((arg)=> console.log(arg));
}
 
printAll('developer', 'coder', 'team');
 
// local scope
let globalMessage = 'global'; //전역변수
function printMessage3(){
    let message = 'hello' ; //지역변수
    console.log(message);
    console.log(globalMessage);
}
printMessage3();
//console.log(message);//오류
 
//return a value
//console.log(sum(3,3)); //호출 가능(hoisted)
function sum(a, b){
    return a + b;
}
 
const result = sum(1,2);
console.log(`sum: ${sum(1, 2)}`)
 
//early return, early exit
//bad : {}안에서 긴 로직코드가 구현되면 가독성이 떨어진다.
function upgradeUser(user){
    if(user.point > 10) {
        //long upgrade logic....
    }
}
 
//good :조건이 맞지 않을때 빨리 리턴 해서 함수 종료하고 조건이 맞을때만  로직을 구현한다.
function upgradeUser(user){
    if(user.point <= 10) { //조건이 맞지 않을때
        return;  
    }
    //long upgrade logic.....
}
 
 
//Function expression
//변수 에 함수 할당
//print(); //오류, 함수선언을 할당한 후 사용할 수 있다. hoisting이 안된다.
const print = function (){  //anonymous function
 
    console.log('print');
 
};
print();
 
const printAgain = print;
 
printAgain();
 
const sumAgain = sum;
 
console.log(sumAgain(1,2));
 
//callback function using function expression
//함수를 파라미터로 전달해서 상황에따라 호출한다 (callback function)
function randomQuiz(answer, printYes, printNo){
    if(answer === 'love you'){
        printYes();
    }else{
        printNo();
    }
}
 
const printYes = function(){
    console.log('Yes !');
};

//named function
const printNo = function print(){ //named function - 함수안에서 자신 스스로를 부룰때 쓸수 있다.
    console.log('No !');
};
 
randomQuiz('wrong', printYes, printNo);
randomQuiz('love you', printYes, printNo);
 
// ※Arrow function
 
//always anonymous , {} 생략 , 리턴 키워드 생략
// const simplePrint = function(){
//     console.log('simplePrint');
// };
 
const simplePrint = ()  =>  console.log('simplePrint');
const add = (a, b) => a + b;
const simpleMultiply = (a, b) => { //{}사용하면 리턴 키워드 사용해야 함
    //do something more
    return a + b;
}
 
//IIFE: Immediately Invoked Function Expression
//함수선언과 동시에 호출하기
(function hello(){
    console.log('IIFE')
})();
5교시

함수의 호출


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../style.css">
    <script>
        function test1(){
            alert('함수가 실행되었습니다.');
        }
    </script>
</head>
<body>
    <h2>함수의 사용예1</h2>
    <script>
        test1();
    </script>
</body>
</html>
매개변수(Parameter, 함수로 전달 값)가 있는 함수의 호출




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../style.css">
    <script>
        function pl(str){
            document.write(`value:${str}, type:${typeof str}<br>`);
        }
    </script>
</head>
<body>
    <h1>함수의 사용예2</h1>
    <script>
        let temp1 = 10;
        let temp2 = '안녕하세요'
        pl('두번째 함수 예제입니다.')
        pl(temp1);
        pl(temp2);
        pl(10.5);
        pl(true);
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../style.css">
    <script src="utility.js"></script>
    <script>
        function adding(x,y){
            let z = x + y;
            return z;
        }
    </script>
</head>
<body>
    <h1>리턴이 있는 함수</h1>
    <hr>
    <script>
        let a = 10;
        let b = 20;
        let c = adding(a,b);
        pl(`두 변수의 합은 ${c}`);

        a ='야식이 건강을 해치는 이유';
        b ='<br> - 소화 불량, 숙면 방해, 비만 유발, 식도염 발생...';
        c = adding (a,b);
        pl(`두 변수의 합 ${c}`);
    </script>
</body>
</html>
confirm 내장함수 
 - 사용자가 확인이나 취소버튼을 클릭할 경우 true나 false를 리턴하는 함수

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../style.css">
    <script src="utility.js"></script>
</head>
<body>
    <h2>confirm 함수 사용 예제</h2>
    <hr>
    <script>
        let temp = window.confirm('확인 또는 취소를 선택하세요');
       
        if(temp){
            pl(`확인 선택: ${temp}`);
        }else{
            pl(`취소 선택: ${temp}`);
        }
    </script>
</body>
</html>
escape, unescape 내장 함수
 - 숫자, 영문자를 제외한 한글등을 16진수 Unicode 형태로 인코딩(변환)하여
   서버로 전송함, 변환을 하지 않으면 한글이 깨짐.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../style.css">
    <script src="utility.js"></script>
</head>
<body>
    <h1>escape, unescape 내장 함수</h1>
    <hr>
    <script>
        pl(`원본: 123-ABC-abc-미합중국/러시아/중국-!?#$% <br><br>`);
        let temp1 = escape('123-ABC-abc-미합중국/러시아/중국-!?#$%');
        let temp2 = unescape(temp1);
        pl(`escape: ${temp1} <br><br>`);
        pl(`unescape: ${temp2}`);
    </script>
</body>
</html>
6. isFinite 내장 함수
 - 정상적인 숫자가 입력되면 true를 그렇지 않고 문자등이 입력되면 false를 리턴

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
    <script src="utility.js"></script>
</head>
<body>
    <h2>isFinite 함수 예제</h2>
    <script>
        let temp1, temp2;
        temp1 = prompt('값을 입력하세요',100);

        // alert(`${temp1}`);

        if(isFinite(temp1)==true){
            pl(`${temp1} 은 유한한 숫자`);
        }else{
            pl(`${temp1} 은 무한대이거나 숫자가 아님`);
        }

    </script>
</body>
</html>
isNaN 내장 함수
 - 입력된 값이 문자이면 true를 반환하고 그렇지 않고 숫자이면 false를 리턴


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
    <script src="utility.js"></script>
</head>
<body>
    <h1> isNaN 함수 예제</h1>
    <script>
        let temp1 = prompt('값을 입력하세요',100.5);
        //문자:true, 숫자:false
        if(isNaN(temp1)){
            pl(`${temp1} 은 문자 이다.`);
        }else{
            pl(`${temp1} 은 숫자 이다.`);
        }
    </script>
</body>
</html>
문자열 관련 함수 응용


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
    <script src="utility.js"></script>
</head>
</head>
<body>
    <h1>문자열함수 예제</h1>
    <strong>
    <script>
        let wc = 'KOREA VICTORY';
        let prn = wc.charAt(0);

        pl(prn);
        pl(wc.charAt(1));
        pl(wc.charAt(2));
        pl();
        pl(`V의 위치: ${wc.indexOf('V')}`);
        pl(`R이 마지막으로 나타난 위치: ${wc.lastIndexOf('R')}`);
        pl(`문자열의 길이: ${'대한민국 WBC'.length}`);
        let tot = 10;
        pl(`tot+tot: ${tot+tot}`);
        pl(`parseInt: ${parseInt('10') + parseInt('10')}`);
    </script>
    </strong>
</body>
</html>
6교시

입력 값의 이동


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        let oldVal = '';
        let newVal = '';

        function ok(f){
            if(oldVal === '' && newVal === ''){
                newVal = f.keyword.value;
            }else if(f.keyword.value === ''){
                return;
            }else{
                oldVal = newVal;
                newVal = f.keyword.value;
            }

            let divTag = document.getElementById('panel');

            let str = `oldVal: ${oldVal} /newVal: ${newVal}`;

           // divTag.innerHTML = divTag.innerHTML + '<br>' + str;
            divTag.append(`${str}`);
            divTag.innerHTML = divTag.innerHTML + '<br>'
        }

    </script>
    <form>
        <input type='text' name='keyword' value='' style='width:90%'>
        <button type='button' onclick='ok(this.form)'>확인</button>
    </form>
    <br>
    <div id='panel' style="font-size:24px"></div>
</head>
<body>
   
</body>
</html>
split 함수 응용


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
    <script src="utility.js"></script>
</head>
<body>
    <h2>split 함수</h2>
    <hr>
    <script>
        let dtolist = '가길동, 100, 90/나길동, 100, 90/다길동, 100, 90';
        let arraydto = dtolist.split('/');
        console.log(`배열길이: ${arraydto.length}`);

        for(let i=0; i < arraydto.length; i++){
            pl(`${arraydto[i]} <br>`);
        }
        pl('<hr>');
        pl(`<h1> <성적 계산 목록> </h1>`);

        for(let i=0; i < arraydto.length; i++){
            let str = arraydto[i].split(',')
            console.log(`배열의 타입 ${i}: ${typeof str[i]}`);
            pl(`성명: ${str[0]}`);
            pl(`영어: ${str[1]}`);
            pl(`수학: ${str[2]}`);

            let eng = parseInt(str[1]);
            let mat = parseInt(str[2]);

            pl(`총점 : ${eng + mat} `);
            pl(`평균 : ${(eng + mat)/2}`);
            pl('--------------------------');
        }
    </script>
</body>
</html>


7교시

함수 활용하기
1. Math의 함수

- Math.round(): 정수로 형변환
- Math.pow(10, 1): 10^1 거듭제곱

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
    <script src="utility.js"></script>
</head>
<body>
    <h2>Math.round, Math.pow 함수 사용</h2>
    <hr>
    <script>
        pl(Math.round(3.4595));
        pl(Math.round(3.5595));
        p('<hr>');

        let digits = Math.pow(10,1);
        let t = Math.round(3.5595 * digits);

        pl(`10^1 거듭제곱: ${digits}`);
        pl(`t: ${t}`);
        pl(`t/digits : ${t/digits}`);

        digits = Math.pow(10,2);
        t = Math.round(3.5595 * digits);
       
        pl(`10^2거듭제곱: ${digits}`);
        pl(`t: ${t}`);
        pl(`t/digits : ${t/digits}`);
    </script>
</body>
</html>
함수 매개변수 전달 및 함수 리턴하기
- 함수도 하나의 자료형이므로 매개변수로 전달할 수 있다.


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        //함수선언
        function callTenTimes(callback){ //callback 매개변수,지역변수

            for (let i = 0; i < 10 ; i ++){
                callback(i);
            }

        }
        //함수표현식
        let callback = function(i){
            alert(`함수 호출 ${i}`);
        }

        //함수호출
        callTenTimes(callback); //callback 실인수, 전역변수의 값
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>            
<body>
    <script>
         //함수선언
         function callTenTimes(callback){ //callback 매개변수,지역변수

        for (let i = 0; i < 10 ; i ++){
        callback(i);
        }
        }

        //함수호출
        callTenTimes(function(i){
        alert(`함수 호출 ${i}`);
        });
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        // 함수를 생성합니다.
        function returnFunction() {
            return function () {
                alert('Hello Function .. !');
            };
        }

        // 함수를 호출합니다.
        returnFunction()();
    </script>
</body>
</html>