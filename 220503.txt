1교시

(2) em을 이용한 반응형 콘텐츠 


<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>JS Bin</title>
</head>
<body>

      <h1>Hello, Responsive coders ?</h1>
  
</body>
</html>	h1 {
  display: inline-block;
  font-size: 5em;
  background-color: mediumaquamarine;
  padding: 1em;
}
 
@media screen and (max-width: 780px) {
  h1 {
    font-size: 3em;
  }
}
 
@media screen and (max-width: 680px) {
  h1 {
    font-size: 1.5em;
  }
}

(3) em/rem을 이용한 반응형 콘텐츠 


<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>JS Bin</title>
</head>
<body>

<section class="component">
      <header class="title">Master Front-end ?</header>
      <p class="contents">
        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sapiente
        veniam, nulla porro distinctio aliquid, quos quidem odio consectetur
        aperiam, delectus cum. Deserunt facilis excepturi similique natus minus
        deleniti rem sit?
      </p>
  
  
</body>
</html>	.component {
  width: 50%;
  border: 1px solid burlywood;
  font-size: 2rem;
}
 
.title {
  padding: 0.5em 0.5rem;
  background-color: burlywood;
}
 
.contents {
  font-size: 1rem;
  padding: 0.5em 0.5rem;
}
 
@media screen and (max-width: 780px) {
  .component {
    font-size: 1.5rem;
  }
}
(4) em/rem을 이용한 반응형 콘텐츠 2


<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>JS Bin</title>
</head>
<body>

 <h1 class="logo">Responsive Coding</h1>
    <div class="container">
      <section class="component">
        <header class="title">Master Front-end ?</header>
        <p class="contents">
          Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sapiente
          veniam, nulla porro distinctio aliquid, quos quidem odio consectetur
          aperiam, delectus cum. Deserunt facilis excepturi similique natus
          minus deleniti rem sit?
        </p>
      </section>
      <section class="component">
        <header class="title">Career Growth ?</header>
        <p class="contents">
          Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sapiente
          veniam, nulla porro distinctio aliquid, quos quidem odio consectetur
          aperiam, delectus cum. Deserunt facilis excepturi similique natus
          minus deleniti rem sit?
        </p>
  
</body>
</html>	h1 {
  font-size: 1.75rem;
  color: burlywood;
  margin: auto;
  text-align: center;
}
 
.container {
  display: flex;
  padding: 2em;
}
 
.component {
  border: 1px solid burlywood;
  margin: 1em;
}
 
.title {
  font-size: 1.5rem;/* 제목의 크기가 동일*/
  padding: 1em;
  background-color: burlywood;
}
 
.contents {
  font-size: 1.125rem;
  padding: 1em;
}
 
/*폰트크기에 따라 변경되는 스크린 너비를 반응형으로 작성*/
@media screen and (max-width: 48rem) { 
  .container {
    flex-direction: column;
  }
}
2교시 / 3교시

반응형 헤더 실습

- 웹페이지 해더의 메뉴바 부분을 반응형으로 만들기 
- Font Awesome의 아이콘 사용
- google Font의 폰트 사용
- 스크린의 크기가 변경될때 헤더의 메뉴바 모양이 변경된다.

1. Font Awesome의 아이콘 사용
- https://fontawesome.com/
- Start for Free -> 이메일 입력 후 -> Send Kit Code 클릭
- 메일 확인하여 연결 링크 클릭하여 스크립트 복사하여 사용한다.

<script src="https://kit.fontawesome.com/*******.js" 
crossorigin="anonymous"></script>
2. 구글 폰트 사용
- https://fonts.google.com/ 에서 원하는 폰트 검색한다. (예: Source Sans Pro)
- 검색된 폰트 클릭한다. 다양한 Style을 선택한다.
- 파업창으로 Selected families 나오면 <link href='.....' rel='stylesheet'> 를 복사하여 사용한다.

3. 코딩 하기 
- flex box 사용
- css 변수사용
- javascript에서 이벤트 사용

이모티콘  https://fontawesome.com/ 
폰트       https://fonts.google.com/
색깔       https://htmlcolorcodes.com/



<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>JS Bin</title>
<link rel="stylesheet" href='page.css'>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Indie+Flower&family=Oleo+Script+Swash+Caps&family=Permanent+Marker&display=swap" rel="stylesheet">
  <script src="https://kit.fontawesome.com/4e28eddbf3.js" crossorigin="anonymous"></script>
  
  <script src='page.js' defer></script>


</head>
<body>
  
    <nav class="navbar">
        <div class="navbar__log">
            <i class="fa-solid fa-cat"></i>
            <a href="#">ResponsiveCoding</a>
        </div>
        <ul class="navbar__menu">
           <li><a href="">Home</a></li>
           <li><a href="">Gallery</a></li>
           <li><a href="">Weddings</a></li>
           <li><a href="">FAQ</a></li>
           <li><a href="">Bookings</a></li>
        </ul>
        <ul class="navbar__icons">
            <li><i class="fa-brands fa-twitter"></i></li>
            <li><i class="fa-brands fa-facebook-f"></i></li>
        </ul>
 
        <a href="#" class="navbar__toggleBtn">
            <i class="fa-solid fa-bars"></i>
 
        </a>
    </nav>
  
  

</body>
</html>	:root {
  --text-color: #E92C76;
  --backround-color: #1A4894;
  --accent-color: #100F10;
}
body {
  margin: 0;
font-family: 'Permanent Marker', cursive;
}
a {
  text-decoration: none;
  color: var(--text-color);
}
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: var(--backround-color);
  padding: 8px 12px;
}
 
.navbar__log {
  font-size: 24px;
  color: var(--text-color);
}
 
.navbar__log i {
  color: var(--accent-color);
}
 
.navbar__menu {
  display: flex;
  list-style: none;
  padding-left: 0;
}
 
.navbar__menu li {
  padding: 8px 12px;
}
 
.navbar__menu li:hover {
  background-color: var(--accent-color);
  border-radius: 4px;
}
.navbar__icons {
  list-style: none;
  color: var(--text-color);
  display: flex;
  padding-left: 0;
}
 
.navbar__icons li {
  padding: 8px 12px;
}
 
.navbar__toggleBtn {
  display: none;
  position: absolute;
  right: 32px;
  font-size: 24px;
  color: var(--accent-color);
}
 
@media screen and (max-width: 768px) {
  .navbar {
    flex-direction: column;
    align-items: flex-start;
    padding: 8px 24px;
  }
  .navbar__menu {
    display: none;
    flex-direction: column;
    align-items: center;
    width: 100%;
  }
  .navbar__menu li {
    width: 100%;
    text-align: center;
  }
  .navbar__icons {
    display: none;
    justify-content: center;
    width: 100%;
  }
  .navbar__toggleBtn {
    display: block;
  }
 
  .navbar__menu.active,
  .navbar__icons.active {
    display: flex;
  }
}	const toggleBtn = document.querySelector('.navbar__toggleBtn');
const menu = document.querySelector('.navbar__menu');
const icons = document.querySelector('.navbar__icons');
 
toggleBtn.addEventListener('click', () => {
    menu.classList.toggle('active');
    icons.classList.toggle('active');
});
크롬브라우저 웹 개발툴
- responsive.html,responsive.css를 jsbin에서 실행한다.
- output 오른쪽 화살표를 클릭하여 크롬브라우저로 결과를 출력한다.
- CTR +SHIFT + i를 클릭하여 크롬의 개발자 도구를 연다.

1. CSS Overview
- 메뉴에서 CSS Overview -> Capture Overview 선택 한다.
- 현재 웹페이지의 CSS 내용을 확인할 수 있다.
- CSS Overview 메뉴가 없을시 아래처러 추가한다.


2. Shadow Editor
- Shadow를 잘 표현 하면 웹사이트를 좀더 입체적으로 멋있게 표현할 수 있다.
- 크롬 개발툴에서 Shadow Editor를 사용할 수 있다.
- Shadow를 사용하기 위한 요소를 Elements tab에서 선택한다.
- element.style 에 box-shadow 를 입력한다.
  element.style {
     box-shadow : 4px 4px #000000aa


3. Font Editor
- 개발자 도구 -> 톱니바뀌(Settings) -> Experiments ->  Enable new Font Editor tool .......  
  선택한다.

- 개발자 도구 -> Styles 의 font 부분에  AA 선택한다.



4. Flexbox Editor
-  jsbin에서 반응형 헤더 index.html, style.css을 실행시킨다.
- output을 크롬으로 실행하고 개발자 모드(ctl+shift+i)를 연다.
- Elements의 소스에서 flex 아이콘을 선택하고 Styles에서 사각형 아이콘을 클릭하여 flex 의 내용을
  수정한다.


4교시

javascript
 - 1993년 최초의 브라우자는 마크 앤더슨이 개발한 모자이크 브라우저 이다 , 그 후 네스케이프 회사를 설립 후 
    UI요소가 추가된 Netscape Navigator를 만든다. 시장 점유율이 80%되며 브라우저가 성장되었다.
  - 브라우저의 성장으로 동적인 웹사이트를 만들기 위해 scripting 언어를 추가한다.
  - 1995년 Netscape의 브랜든 아이크에 의해 모카를 개발, 후에 LiveScript로 변경 되었으며
    최종적으로 이름을 JavaScript로 변경하였다.  
 - HTML과 Server Script(백앤드) 사이에서 접속자의 마우스 클릭, 키보드 입력등 이벤트 처리를
   주로 담당한다.
  HTML + CSS <---> Javascript <---> 백앤드
       출력             동작/이벤트      데이터베이스 접속 처리(Oracle, MySQL...)
   - 2004년 제스 제임스는 Ajax를 도입시킴 Javascript는 Ajax 통신을 이용하여 서버와 태그단위로 (JSP는 페이지단위 통신, 페이지단위 이동)  비동기 통신이 가능하며, jQuery로 Framework화 되어 발전되어 사용한다.

 - 요즘은 Ajax 통신의 결과를 SPA(Single Page Application)로 구현하기 위해 typescript, React등
   을 사용 한다.
 - javascript 코드는 Chrome(V8 엔진, 가장 고속), IE, FF등의 브러우저가 처리함.

 - 모든 브라우저는 현재 ECMAScript 10 in 2019 등 표준화로 정착되어 사용한다.

 - 참조 사이트 : https://developer.mozilla.org/en-US/docs/Web/JavaScript

1. 자바스크립트 실행
 (1) JS 는 브라우저에서 확인할 수 있다.
 - Editplus 편집기에서 test.html 생성하여  web/javascript 에 저장한다.

 - 브라우저(크롬)로 열기하여 F12 선택하여 Console 아래 Hello World!를 확인한다.


(2) Text Editor 비주얼 스튜디오 설치 및 확장하기

- https://code.visualstudio.com/download

>>>효율적인 코딩을 위한 Extentions
- open in browser install : 브라우저에서 확인
- Material Theme install -> set color theme -> darker high contrast 
- Material Icon Theme install 
- Prettier - Code formatter install -> 아래 부분 Manage -> Settings 선택 -> 
    save 검색 후
          Editor:Format On Save 아래 체크
    prettier 검색 후
          Prettier :Tab Width
          Number of spaces it should use per tab
          2 로 설정
    Quote 검색 후 
          Javascript;Preferences: Quote Style
          .....
          auto -> single로 변경
    
    Typescript;Preferences: Quote Style
          .....
          auto -> single로 변경
- Bracket Pair Colorizer install : 괄호 색깔 다르게 지정됨
- Indent Rainbow install : 들여쓰기가 보기 좋게 표현된다.
- Auto Rename Tag install : html의 앞에 태그를 바꾸면 뒤에 닫는 태그도 바꾸어준다.
- CSS Peek install : css 찾기 쉽게 한다. class의 이름 위에서 Ctrl + 클릭하면 style로 이동.
- HTML CSS Support install : html에서 css의 자동완성 이용할 수 있다.
- Live Server install : 서버사용, html, css 변경사항을 저장후 바로 적용해준다.
        Manager -> Settings -> live server 검색 -> Use local ip 체크, Custom Browser : chrome선택
       
        html 파일의 Open with Live Server 선택 후 브라우저에서 확인할 수 있다.
(3) VSCode에서 open folder 선택하여 web/javascript폴더 선택한다.
- javascript 옆의 새파일 선택하여 index.html 생성 후 
  ! Tab을 눌러 기본html 코드를 생성한다.
- index.html -> head -> script src='main.js'  작성 후 브라우저에서 확인한다. 
- 확인방법 : 파일선택 오른쪽 마우스 Open in  Default Browser, Open with Live server


(4) async 와 defer
- html 한줄 한줄 읽어가는것(이해, 분석)을 parsing이라고 한다. 
- <script src='main.js'></script>
  : 페이지가 준비되기 전에 js가 실행 될 수 있다.
   js 파일이 크다면 페이지가 준비 되기 까지 시간이 오래 걸릴 수 있다.

   html parsing -> js 다운로드 -> js 실행 -> 다시 html parsing 
 
- <script async src='main.js'></script> 
   : 병렬로 html parsing과 js 다운로드 된다 그러나 먼저 js가 다운로드 되면 페이지가 준비되지
     않은 상태에서 js가 실행될 수 있다.

    html parsing ->  blocked -> html parsing 
    js 다운로드   ->  js실행
 
- <script defer src='main.js'></script>
  : 병렬로 html parsing과 js 다운로드 된다.  html parsing과  js 다운로드가 되면 js가 실행한다.  가장 안정적인 방법이다.
    여러개의 js는 다운로드 시간과 상관없이 선언된 순서대로 실행한다.

    html parsing      ┐ 
                            -> 페이지를 보여지고 ->  js실행
    js 다운로드        ┘ 
5교시 / 6교시

2. 변수의 선언
 - 변수에 할당되는 데이터에 따라 동적으로 타입이 할당, 자바는 타입이 철저 구분.
 - 변수 선언시 int등의 데이터 타입을 선언하지 않는다.
 - js 작성시 처음부분에 'use strict'; 써주면 js에서 유연한(안전하지 못한) 변수 선언, 타입변경 등을 좀더
   안전(엄격)하게 만들어 준다.
 - var, let(권장, ES6) 이용하여 선언
   let str = "message string";
 - var는 var 사용하지 않고 선언된 모든 변수는 전역변수, 함수안에서 선언해도 전역변수로 바뀜
   (권장 아님, var hoisting: 선언을 맨위로 올림)
 - const는 선언과 함께 할당된 값이 변경되지 못한다.
(1) Data Type
 - 자바스크립트의 데이터타입은 하나의 변수에 여러가지 데이터형을 저장할 수 있다.
   (Dynamic typing : dynamically typed language)

■ primitive - 더이상 작은 단위로 나눠지지 않는 타입, single item
 - number: 정수, 실수, 숫자 0으로 시작하는 8진수, 0x로 시작하는 16진수등을
               저장할 수 있는 복합적인 데이터 타입이다.

 - string : "" , ''를 이용해서 문자열을 표현한다. 또한 template literals도 문자열로 표현한다.
 
 - boolean : true, false를 값으로 가지며, 0, null, undefined, NaN, '' 는 false로 해석되고
                그 외의 값은  true로 해석된다.
                참조사이트

 - null: 데이터의 형식이 알려지지 않았거나 데이터가 없음을 나타내는데 사용한다.

 - undefined: 변수를 선언후 데이터를 할당하지 않은 경우 갖는 값이다.

 - symbol :  고유한 식별자가 필요할때 사용한다. 출력할때는 description 속성을 사용해서 
                string으로 변환해야 한다.
 

■ object : single item을 묶어서 한 단위나 box로 관리할 수 있다.

■ function : 함수는 작업을 수행하거나 값을 계산하는 문장 집합 같은 자바스크립트 절차
                      함수를 사용하려면 함수를 호출하고자 하는 범위 내에서 함수를 정의해야한다.

함수 : https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions

화살표 함수 : https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions

 



'use strict';
let name = '홍';
const maxNumber = 5;
console.log(name);

let a = 12;
let b = 12.1;
console.log(`value:${a},type${typeof a}`);
console.log(`value:${b},type${typeof b}`);

const infinity = 1/0;
const negativeInfinity = -1/0;
const nAn = 'not a number'/2;

console.log(infinity);
console.log(negativeInfinity);
console.log(nAn);

const char = 'c';
const brendan = 'brendan';
const greeting = 'hello' + 'brendan';
console.log(`value:${greeting},type$:{typeof greeting}`);
console.log("hi" + brendan + "!");
console.log(`hi${brendan}`);

const helloBob = `hi${brendan}!`;
console.log(`value:${helloBob}type:${typeof helloBob}`);
console.log('value:'+helloBob+ 'type:' + typeof helloBob);


//false : 0, null, undefined, NaN, ''
const canRead = true
const test = 3 < 1;
console.log(`value: ${canRead}, type: ${typeof canRead}`);
console.log(`value: ${test}, type: ${typeof test}`);

//null : empty calue
let nothing = null;
console.log(`value: ${nothing}, type: ${typeof niothing}`)

//undefined : 정해지지 않은 값
let x;
console.log(`value: ${x}, type: ${typeof x}`);

//symbol : 고유식별자
const symbol1 = Symbol('id');
const symbol2 = Symbol('id');
console.log(symbol1 == symbol2);
const gsymbol1 = Symbol.for('id');
const gsymbol2 = Symbol.for('id');
console.log(gsymbol1 === gsymbol2);

console.log(`value: ${symbol1.description}, type{typeof symbol1}`);
console.log(`value: ${symbol1.description}, type{typeof symbol1}`);

let text = 'hello'
console.log(text.charAt(0));
console.log(`value:${text}, type:${typeof text}`);
text = 1;
console.log(`value: ${text}, type: ${typeof text}`);
text = '8' / '2'; // 8, 2 숫자로 자동 변환
console.log(`value: ${text}, type: ${typeof text}`);
// console.log(text.charat(1)); // 값이 숫자로 바뀜

text = '7' + '5'; // + 기호 때문에 5가 문자열로 변환
console.log(`value: ${text}, type: ${typeof text}`);

const obj = {name:'obj', age:20};
console.log(`name: ${obj.name}, age: ${obj.age}, type: ${typeof obj}`);

7교시

3. Operator(연산자)

(1) 산술연산
 - ! Tab (Emmet abbreviation)


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=chrome">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        *{
            font-family: gulim;
            font-size: 22px;
        }

    </style>
</head>
<body>
    <h1>연산자</h1>
    <hr>
    <script>
        let i =10;
        let j =3;

        pl(`더하기 : ${i+j}`);
        pl(`빼기 :  ${i-j}`);
        pl(`나누기: ${i/j}`);
        pl(`나머지 : ${i%j}`);
        function pl(str){
            document.write(`${str} <br><br>`);
        }

    </script>
</body>
</html>
(2) String concatenation (+), 산술연산, ++,  연산후 할당연산, 비교연산, 논리연산, Equality
- 주석색상 변경하는 방법
- Manager->settings->.json검색 -> JSON:Schemas 아래  Edit in settings.json 클릭하여 아래 코드 추가




console.log('my' + 'dog');
console.log('1' + 2);
console.log(`string literals : 1+2 = ${1+2}`);
console.log(1 + 1);
console.log(1 - 1);
console.log(1 / 1);
console.log(1 * 1);
console.log(5 % 2); //나머지
console.log(5 ** 2); //제곱

let counter = 2;
const preIncrement = ++counter; // counter 값이 먼저 증가된 후 할당된다.
console.log(`preIncrement : ${preIncrement}, counter : ${counter}`);

const postIncrement = counter++;
console.log(`postIncrement: ${postIncrement}, counter:${counter}`);
// 연산 후 할당

let x = 3;
let y = 6;
console.log(x += y); // x = x+y
console.log(x -= y); // x = x-y
console.log(x /= y); // x = x/y
console.log(x *= y); // x = x*y

//비교연산
console.log(10 < 6);
console.log(10 <= 6);
console.log(10 > 6);
console.log(10 >=6);

//논리 연산  || (or), && (and), ! (not)
const value1 = true;
const value2 = 4 < 2;

// or  연산 (첫번째 값이 true이면 뒤에 두개는 확인하지 않는다 check()함수 실행 안함)
console.log(`or: ${value1 || value2 || check()}`);

// and 연산 (check() 처럼 내용이 긴 경우 마지막 비교 부분에 넣는것이 좋다.)
console.log(`and: ${value1 && value2 && check()}`);

//객체가 널 인지 확인후 널이 안닐경우만 객체의 속성이나 함수를 호출한다.
// if(nullableObject != null){
//     nullableObject.something;
// }

function check(){
    for (let i = 0; i < 10; i++) {
        console.log('wating ?');
    }
    return true;
}

// !(not)
console.log(!value1)


//Equality (==, ===)
const stringfive = '5';
const numberfive = 5;

//== loose equality, with type conversion (타입변환을 사용한 약한 비교)
console.log(stringfive == numberfive);
console.log(stringfive != numberfive);

//=== strict equality, no type convrsion(타입변환을 하지 않는 엄격한 비교)
console.log(stringfive === numberfive);
console.log(stringfive !== numberfive);

// object equality by reference
const js1 = {name:'js'};
const js2 = {name:'js'};
const js3 = js1;
console.log(js1 == js2);
console.log(js1 === js2)
console.log(js1 === js3)

//equality 확인
console.log(0 == false);
console.log(0 === false);
console.log('' == false);
console.log('' === false);
console.log(null == undefined);
console.log(null === undefined);





8교시

제어문

1.  if, Ternary operator:?, swich, loop, break, continue


(1) 제어문 확인

const name = 'js';
if(name ==='js'){
    console.log('Welcome, js!!!');
}else if(name === 'coder'){
    console.log("coder@@@");
}else{
    console.log('unknown');
}

//Ternary operator:? 셋으로 이루어진 연산
//condition ? value1 : value2;
console.log(name === 'js' ? 'yes' : 'no');

//switch statement
//use for multiple if checks
//use for enum-like value check
//use for multiple type checks in TS
const browser = "IE";
switch (browser){
    case 'IE':
        console.log("이제 없어진다.");
        break;
    case 'Chrome':
        console.log("아주 많이 사용");
    case 'Firefox':
        console.log('이제 안 사용');
        break;
    default:
        console.log("모두 브라우저");
        break;
}

//반복 , while the condition is truthy,
//body code is executed
let i = 3;
while (i>0){
    console.log(`while:${i}`)
    i--;
}

//do while 반복, body code is executed first,
//then check the condition.
do{
    console.log(`do while: ${i}`)
    i--;
} while(i > 0);

//for 반복, for(begin; codition; step)
for (i = 3; i > 0 ; i--){
    console.log(`for: ${i}`);
}

//중첩 반복
for(let i=0; i < 10; i++){
    for(let j=0; j < 10; j++){
        console.log(`i: ${i}, j: ${j}`);
    }
}

//break, continue
for (let i=0; i < 11; i++){
    if(i % 2 !== 0){
        continue; //continue 대신  i값 출력해도 된다.
    }
    console.log(`i: ${i} `)
}
for(let i = 0; i <  11; i++){
    if(i > 8){
        break;
    }
    console.log(`i: ${i}`);
}
//false : 0, -0, ' ', null, undefined
//true : -1, 'hello', 'false'

let obj = {
    name  : 'hong'
};
if (obj) {
    console.log(obj.name);
}
obj && console.log(obj.name);
