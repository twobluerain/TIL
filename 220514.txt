1교시 / 2교시

복습



※ Ajax 란 무엇인가?

Ajax는 JavaScript의 라이브러리중 하나이며 Asynchronous Javascript And Xml(비동기식 자바스크립트와 xml)의 약자이다. 브라우저가 가지고있는 XMLHttpRequest 객체를 이용해서 전체 페이지를 새로 고치지 않고도 페이지의 일부만을 위한 데이터를 로드하는 기법 이며 Ajax를 한마디로 정의하자면 JavaScript를 사용한 비동기 통신, 클라이언트와 서버간에 XML 데이터를 주고받는 기술



※ 비동기(async)방식이란?

비동기 방식은 웹페이지를 리로드하지 않고 데이터를 불러오는 방식이다. 이 방식의 장점은 페이지 리로드의 경우 전체 리소스를 다시 불러와야하는데 이미지, 스크립트 , 기타 코드등을 모두 재요청할 경우 불필요한 리소스 낭비가 발생하게 되지만 비동기식 방식을 이용할 경우 필요한 부분만 불러와 사용할 수 있으므로 매우 큰 장점이 있다.



※ 왜 사용하는가?

기본적으로 HTTP프로토콜은 클라이언트쪽에서 Request를 보내고 Server쪽에서 Response를 받으면 이어졌던 연결이 끊기게 되어있다. 그래서 화면의 내용을 갱신하기 위해서는 다시 request를 하고 response를 하면서 페이지 전체를 갱신하게 된다. 하지만 이렇게 할 경우 페이지의 일부분만 갱신할 경우에도 페이지 전체를 다시 로드해야하는데 엄청난 자원낭비와 시간낭비를 초래하고 말것이다.



※ Ajax의 장점

1. 웹페이지의 속도향상

2. 서버의 처리가 완료 될때까지 기다리지 않고 처리 가능하다.

3. 서버에서 Data만 전송해면 되므로 전체적인 코딩의 양이 줄어든다.

4. 기존 웹에서는 불가능했던 다양한 UI를 가능하게 해준다. 사진공유 사이트 Flickr의 경우 사진의 제목이나 태그를 페이지 리로드 없이 수정할 수 있다.

※ Ajax의 단점

1. 히스토리 관리가 안 된다. (보안에 좀 더 신경을 써야한다.)

2. 연속으로 데이터를 요청하면 서버 부하가 증가할 수 있다.

3. XMLHttpRequest를 통해 통신을 하는 경우사용자에게 아무런 진행 정보가 주어지지 않는다. 그래서 아직 요청이 완료되지 않았는데 사용자가 페이지를 떠나거나 오작동할 우려가 발생하게 된다. 


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
 
        function loadDoc(){
            let xhttp;
            if(window.XMLHttpRequest){
                xhttp = new XMLHttpRequest();
            } else {
               // code for IE6, IE5
                xhttp = ActiveXObject("Microsoft.XMLHTTP");
            }
 
            xhttp.onload = onLoadListener;
            xhttp.onerror = onErrorListener;
            // xhttp.addEventListener("error", onErrorListener);
               
            xhttp.open("GET","member.jsp",true);
            xhttp.send();
 
        }
        function onLoadListener(){
            let result = JSON.parse(this.responseText);
            if(result.code === 'success'){
                let marr = result.data.member;
                let tex = '';
                console.log(marr);
                document.getElementById('demo').innerHTML="";
                for(let i=0; i<marr.length; i++){
                    let idx = marr[i]["id"] ;
                    let name = marr[i].name ;
                    let sno = marr[i].sno ;
                    let txt = idx + " [" + name + "] " + sno + ", ";
                   
                    document.getElementById("demo").append(txt);
                       
                }
            }
        }
 
        function onErrorListener(err){
            console.log('XHR Error : ',err);
        }
 
 
 
    </script>
</head>
<body>
    <p id='demo'>Let AJAX change this text.</p>
    <button onclick='loadDoc()'>Change Content</button>
   
</body>
</html>
3교시

동기와 비동기에서 callback
1. 동기와 비동기 처리
- 자바스크립트는 동기 처리를 한다. 정해진 코드 순서대로 처리한다.
- 자바스크립트는 hoisting 처리를 하여 var, function 선언부분을
  맨 앞으로 이동 시킨다.
- Ajax에서는 비동기 처리를 하며 비동기는 언제 코드가 실행될지
  예측할 수 없다.
- setTimeout()는 브라우저 API이며 callback 함수를 정의하여 얼마의 시간이
  지난후에 콜백함수가 자동으로 호출된다.
- callback함수는 메소드의 매개변수로 전달되어 메소드 내부에서 이름없는
  함수 또는 에로 함수('()=>{}')로 표현된다. 메소드내부에서 기능처리중에
  호출된다. 




// console.log('1')
// console.log('2')
// console.log('3')
 
//asynchronous 비동기는 언제 코드가 실행될지 예측할 수 없다.
console.log('1');
setTimeout(() => {console.log('2');}, 1000); //브라우저에서 제공하는 API
console.log('3');
 
//Synchronous callback-자동으로 호출되는 메서드
function printImmediately(print){
    print()
}
printImmediately(() => console.log('hello'));
 
//Asynchronous callback
function printWithDelay(print, timeout){
    setTimeout(print,timeout);
}
printWithDelay(() => console.log('async callback'),2000);
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="callback.js" defer></script>
</head>
<body>
   
</body>
</html>




 callback함수 example

- UserStorage 클래스에서 로그인 처리 메서드와 로그인이 성공이면 역할을 
  얻어오는 메서드를 선언한다.
- 메소드  loginUser, getRoles는 콜백함수를 정의하여 기능처리를 한다.
- loginUser와 getRoles의 onSuccess, onError는 콜백함수이다.
- 콜백함수안에서 또다른 콜백함수를 연속적으로 호출하게 되면 가독성이 
  떨어져서 유지보수성과 확장성이 낮아진다.



class UserStorage {
    loginUser(id,password, onSuccess, onError){ //로그인 확인
        setTimeout(()=>{ //서버역할, 어느정도 시간을 걸리게한다.
            if (
                (id === 'study' && password === 'aistudy') ||
                (id === 'coder' && password === 'academy')
            ) {
                onSuccess(id);
            } else {
                onError(new Error('not found'))
            }
        }, 2000)
    }
    getRoles(user, onSuccess, onError){ //사용자 역할 받아오기
        setTimeout(() => { //서버역할, 어느정도 시간을 걸리게한다.
            if(user === 'study' ){
                onSuccess({ name : 'study', role : 'admin'});
            } else {
                onError(new Error('no access'))
            }
        },1000)
 
    }
}
 
const userStorage = new UserStorage();
const id = prompt('enter your id');
const password = prompt('enter your password');
userStorage.loginUser(
    id,
    password,
    user => {
        userStorage.getRoles(
            user,
            userWithRole => {
                alert(`hello ${userWithRole.name}, you have a ${userWithRole.role} role`);
            },
            error => {
                console.log(error);
            }
        );
    },
    error => { console.log(error)}
);
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="callback-hell.js" defer></script>
</head>
<body>
   
</body>
</html>






4교시

callback 함수의 개선
- Promise, async, await 사용으로 callback 문제점을 해결할 수 있다.


- 참조사이트 : MDN Web Docs

- Promise 객체는 자바스크립트에서 제공하며, 비동기를 간편하게 처리할 수 있도록 도와준다.
- 정해진 장시간의 기능을 수행 후 정상적인 수행 완료 또는 실패와 그 결과 값을 전달한다.
- javascrit의 클래스로 생성자를 통해서 객체를 만든다.
- 비동기 연산이 종료 후의 결과값이나 실패 이유를 처리하기 위한 처리기를 연결할 수 있다. 
- 프로미스를 사용하면 비동기 메서드에서 마치 동기 메서드처럼 값을 반환할 수 있다. 
- 최종 결과를 반환하지는 않고, 대신 프로미스를 반환해서 미래의 어떤 시점에 결과를
  제공한다.
- Promise는 다음 중 하나의 상태를 가진다.
    대기(pending) : 이행하거나 거부되지 않은 초기 상태.
    이행(fulfilled) : 연산이 성공적으로 완료됨.
    거부(rejected) : 연산이 실패함.
- 대기 중인 프로미스는 값과 함께 이행할 수도, 어떤 이유(오류)로 인해 거부될 수 있다.
- 이행이나 거부될 때, 프로미스에 연결한 처리기는 그 프로미스의 then 메서드로 대기열에
  오른다.

(1) Promise 생성, 사용

  const promise = new Promise((resolve, reject) =>{  

   });

- Promise 생성자에서 excutor 콜백함수는 또다른 resolve(정상수행 후 결과전달), reject(문제가 생기면 호출) 
  콜백함수를 받는다.
- Promise는 시간이 걸리는 비동기 처리를 구현할 수 있다.
- Promise를 생성하면 executor 콜백함수가 자동으로 실행된다. (※)
- Promise를 생성하여 비동기 처리를 구현 후 resolve(), reject() 콜백 함수를 호출하여 그결과를 전달한다.
  Promise 사용하는 곳에서 결과를 then, catch, finally 등으로 받을 수 있다.

//1. Producer:제공자
// when new Promise is created, the executor runs automatically.
 
const promise = new Promise((resolve, reject)=>{
    //doing some heavy work(network, read files)
    console.log('doing something...');
    setTimeout(() => {
        resolve('study');
        //reject(new Error('no network'));
    }, 2000)
});
 
//2. Consumers : 사용자 , then, catch, finally
promise //
    .then((value)=>{ // value는 promise가 잘 처리되어 resolve호출하고 거기에 전달된 'study' 를 받는다.
        console.log(value);
    })
    .catch(error => { //error는 promise가 처리되다 오류가 발생하여 전될되는 Error객체를 받는다.
        console.log(error);
    })
    .finally(() => { //무조건 실행되는 곳
        console.log('finally')
    });
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="promise.js" defer></script>
</head>
<body>
   
</body>
</html>

5교시

(2) Promise chaning, error 처리
- Promise chaning, Promise error 예제 확인
- then은 값 또는 Promise 객체가 전달된다.


const fetchNumber = new Promise((resolve, reject) => {
    setTimeout(() => resolve(1), 1000);
});
fetchNumber
    .then(num => num * 2)
    .then(num => num * 3)
    .then(num => {
        return new Promise((resolve, reject) => {
            setTimeout(() => resolve(num - 1), 1000);
        });
    })
    .then(num => console.log(num));
 
//4. Error Handling
const getHen = () =>
    new Promise((resolve, reject) => {
        setTimeout(() => resolve('hen'),1000);
    });
 
const getEgg = hen =>
    new Promise((resolve, reject) => {
       setTimeout(() => resolve(`${hen} => egg`),1000);
       //setTimeout(() => reject(new Error(`error! ${hen} => egg`)),1000);
    });
 
const cook = egg =>
    new Promise((resolve, reject) => {
        setTimeout(() => resolve(`${egg} => brunch`),1000);
    });
 
getHen()
    .then(hen => getEgg(hen))
    .then(egg => cook(egg))
    .then(meal => console.log(meal))
    .then(err => console.log(err)); //getEgg 에서 에러 처리, 오류난 부분에서 catch부분으로 건너띈다.
// 받아온 값 하나를 => 함수에 파라메터로 보낼때 간단히 표현방법.
// 간단히
// getHen()
//     .then(getEgg)
//     .then(cook)
//     .then(console.log)  
//     .catch(console.log);
 
// 중간에 오류처리하는 방법, 계란을 받아오다가 오류가 나면 다른재료로 대체한다.
// getHen()
//     .then(getEgg)
//     .catch(error => {
//         return 'bread';
//     })
//     .then(cook)
//     .then(console.log)
//     .catch(console.log)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="promise2.js" defer></script>
</head>
<body>
   
</body>
</html>
6교시

callback Promise 



class UserStorage {
    loginUser(id,password, onSuccess, onError){ //로그인 확인

        return new Promise((resolve, reject)=>{
        setTimeout(()=>{ //서버역할, 어느정도 시간을 걸리게한다.
            if (
                (id === 'study' && password === 'aistudy') ||
                (id === 'coder' && password === 'academy')
            ) {
                resolve(id);
            } else {
                reject(new Error('not found'))
            }

            }, 2000)
        });
    }

    getRoles(user){ //사용자 역할 받아오기
        return new Promise((resolve, reject) => {
        setTimeout(() => { //서버역할, 어느정도 시간을 걸리게한다.
            if(user === 'study' ){
                resolve({ name : 'study', role : 'admin'});
            } else {
                reject(new Error('no access'))
            }
        },1000)
        });
    }
}
const userStorage = new UserStorage();
const id = prompt('enter your id');
const password = prompt('enter your password');
userStorage
    .loginUser (id,password)
    .then(user => userStorage.getRoles(user))
    .then(user => alert('Hello ${user.name, you have a ${user.role} role'))
    .catch(console.log);


7교시

2. async, await 사용
- 참조 사이트 : MDN Web Docs
- 기존 Promise위에 좀더 간편하게 사용할 수 있는 방법이다.
- async function 선언은 AsyncFunction 객체를 반환하는 하나의 비동기 함수를 정의한다.

- 암시적으로 Promise를 사용하여 결과를 반환한다. 
- 비동기 함수를 사용하는 코드의 구문과 구조는, 동기 함수를 사용하는것 처럼 보인다.
- async 함수에는 await식이 포함될 수 있다. 
- await은 async 함수의 실행을 일시 중지하고 전달 된 Promise의 해결을 기다린 다음 
  async 함수의 실행을 다시 시작하고 완료후 값을 반환한다.
- await 키워드는 async 함수에서만 유효하다
- 너무많은 체인을 사용하면 callback함수를 겹겹히 사용하는 것처럼 가독성이 
  떨어지는데 async, await는 좀더 간결한 코드를 만들기 위해서 사용한다.


async.js


//1. async : 코드블럭이 자동으로 promise로 변환

async function fetchUser() {
    //do network request in 10 secs....
    return 'study';
  }
   
  const user = fetchUser();
  user.then(console.log);
  console.log(user);
   
await


//1. async : 코드블럭이 자동으로 promise로 변환
async function fetchUser() {
    //do network request in 10 secs....
    return 'study';
  }
   
  const user = fetchUser();
  user.then(console.log);
  console.log(user);
   

  //2. await

  function delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  async function getApple() {
    await delay(1000);
    return 'apple';
  }

  async function getBanana() {
    await delay(1000);
    return 'banana';
  }

//   function pickFruits(){
//       return getApple().then((apple)=>{
//           return getBanana().then((banana)=>`${apple} + ${banana}`);
//       });
//   }

// 개선된 코드
// async function pickFruits(){
//     try{
//         const apple = await getApple();
//         const banana = await getBanana();
//         return `${apple} + ${banana}`;
//     }catch{
//         console.log(new Error('error'));
//     }
// }

//병렬 처리로 더 개선된 코드

// async function pickFruits() {
//   const applePromise = getApple(); //Promise 리턴, 바로 promise 실행
//   const banaaPromise = getBanana(); //Promise 리턴, 바로 promise 실행
//   const apple = await applePromise;
//   const banana = await banaaPromise;
//   return `${apple} + ${banana}`;
// }

//promise APIs all() 병렬처리 코드를 더 개선

// function pickFruits(){
//     return Promise.all([getApple(), getBanana()])
//         .then((fruits) => fruits.join('+'));
//     }

// pickFruits().then(console.log);

//promise APIs race() 먼저 수행되는 것 하나의 결과를 가져온다

function pickOnlyOne(){
    return Promise.race([getApple(), getBanana()]);
}

pickOnlyOne().then(console.log);







- topromise.js 에 async, await 추가해서 수정한 소스

8교시



    class UserStorage {
    loginUser(id, password) {
        return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (
            (id === 'study' && password === 'aistudy') ||
            (id === 'coder' && password === 'academy')
            ) {
            resolve(id);
            } else {
            reject(new Error('not found'));
            }
        }, 2000);
        });
    }

    getRoles(user) {
        return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (user === 'study') {
            resolve({ name: 'study', role: 'admin' });
            } else {
            reject(new Error('no access'));
            }
        }, 1000);
        });
    }

    // 추가된 곳 ?
    async getUserWithRole(user, password) {
        const id = await this.loginUser(user, password);
        const role = await this.getRoles(id);
        return role;
    }
    }

    const userStorage = new UserStorage();
    const id = prompt('enter your id');
    const password = prompt('enter your passrod');

    //변경된곳
    userStorage
    .getUserWithRole(id, password) //
    .then(user => alert(`Hello ${user.name}, you have a ${user.role} role`))
    .catch(console.log)








XHR와 Promise사용 실습
- 서버의 급여 정보 비동기 통신으로 요청하여 출력하기

1. 서버의 응답 페이지
- 서버의 JSP경로 수정
- tomcat-10 -> Open Server Configuration -> Context docBase ="F:\aistudy2\web\ajax\async"

<%@ page contentType="text/html; charset=UTF-8" %>
<%
String[] titles = {
"  급  여  명  세  서 ",
"기 본 급: 2,500,000 원",
"야근수당:   100,000 원",
"주말수당:   200,000 원",
"세금합계:   100,000 원",
"실수령액: 2,900,000 원",
"입금 예정일: 2021-10-01일 수고하셨습니다.",
};
%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style type="text/css">
        *{
          font-family: gulim;
          font-size: 20px;
          color:green;
          font-weight: bold;
        }
         
    </style>
</head>
<body>
    <ul>
<%
String id = request.getParameter("id");
String passwd = request.getParameter("passwd");
System.out.println(id);
if (id.equals("테스트") && passwd.equals("테스트")){
    for (int i = 0 ; i < titles.length ; i++) {
        out.println("<li>" + titles[i] + "<br/><br/>");
    }
}else{
    out.println("<li>인증 실패입니다.<br/><br/>");
    out.println("<li>다시 시도해 주세요.<br/><br/>");
}
%>    
</ul>
</body>
</html>