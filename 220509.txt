1교시

클로저
  - 함수 안에 선언된 변수는 지역변수 이므로 함수 외부에서 사용할 수 없다.
  - 클로저는 위 규칙을 위반할 수 있다.
  - 흔히 함수 내에서 함수를 정의하고 사용하면 클로저라고 할 수 있다.
  - 정의한 함수를 리턴하고 사용은 바깥에서 한다. 


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        // 함수를 선언합니다.
        function test(name) {
            let output = 'Hello ' + name + ' .. !';
        }
 
        // 출력합니다.(호출안됨)
        alert(output);
    </script>
</head>
<body>
   
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        // 함수를 선언합니다.
        function test(name) {
            let output = 'Hello ' + name + ' .. !';

            return function(){
                console.log(output)
            }
        }
 
        // 출력합니다.(호출가능)
        test('javascript')();
    </script>
</head>
<body>
   
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        // 함수를 선언합니다.
        function test(name) {
            let output = 'Hello ' + name + ' .. !';

            return function(){
                console.log(output)
            }
        }

       
        // 출력합니다.(호출가능)
        test('javascript')();
        let test1 = test('Web');
        let test2 = test('Ajax');

        test1();
        test2();
    </script>
</head>
<body>
   
</body>
</html>
4. 중첩함수와 익명의 자기 호출 함수
   - 중첩함수는 부모의 함수의 변수에 접근가능하다.
   - 아래 중첩함수 예제의 문제를 익명의 자기 호출 함수로 해결할 수 있다.


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <p>Counting with a local variable.</p>
    <button type="button" onclick="myFunction()">Count!</button>
    <p id="demo">0</p>

    <script>
        function add() {
            let counter = 0;
            function plus() {counter += 1;}
            plus();    
            return counter;
        }

        function myFunction(){
            document.getElementById("demo").innerHTML = add();
        }
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <p>Counting with a local variable.</p>
    <button type="button" onclick="myFunction()">Count!</button>
    <p id="demo">0</p>

    <script>
        var add = (function () {
            var counter = 0;
            return function () {return counter += 1;}
        })();

        function myFunction(){
            document.getElementById("demo").innerHTML = add();
        }
        </script>
</body>
</html>


2교시

[02] 타이머 함수
- 타이머 함수는 특정한 시간에 특정한 함수를 실행할 수 있게 하는 함수이다.
- setTimeout()함수는 특정한 시간 후에 함수를 한 번 실행한다.
- setInterval()함수는 특정한 시간마다 함수를 실행한다.
- 지속적인 실행은 컴퓨터 자원을 소비함으로 타이머가 더이상 필요없을때는
 타이머를 멈춤니다.
 clearTimeout(), clearInterval() 사용


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        setTimeout(() => {alert('3초가 지났습니다.')},3000);
    </script>
</head>
<body>
   
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        let intervalld = setInterval(()=>{alert(`${new Date()}`)},1000);
        setTimeout(() => {clearInterval(intervalld);},3000);
    </script>
</head>
<body>
   
</body>
</html>
- 자바스크립트의 실행순서 ( A->C->B)
- 타이머 함수는 웹브라우저가 처리하고 완료된것을 자바스크립트에 알려준다.
- 배열의 forEach() 메소드를 이용한 배열값 출력


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        console.log('A');
        setTimeout(()=>{console.log('B')},0);
        console.log('C');

        for(let i = 0; i < 3; i++){
            setTimeout(() => {console.log(i);},0);
        }

        [0,1,2].forEach((i) => {
            setTimeout(() => { console.log(i);},0);
        });
    </script>
</head>
<body>
   
</body>
</html>
- 함수 -> 클래스 없는 객체 -> 클래스 선언, 생성자 선언 후  클래스를 객체 생성





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function Counter(){
            this.sum = 0;
            this.count = 0;
        }
        Counter.prototype.add = function(array){
            array.forEach(entry => {
                this.sum += entry;
                ++this.count;
            },this);
        };

        let obj = new Counter();
        obj.add([2,5,9]);
        console.log(`count : ${obj.count}`);
        console.log(`sum: ${obj.sum}`);

    </script>
</head>
<body>
   
</body>
</html>


3교시

객체(Objects)

- JavaScript의 데이터 유형 중 하나이다.
- 관련 데이터 및/또는 기능 모음
- JavaScript의 거의 모든 객체는 Object의 인스턴스입니다.

const obj1 = { key : value }; //'object literal' syntax
const obj2 = new Object(); //'object constructor' syntax




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=chrome">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="object.js"></script>
</head>
<body>
   
</body>
</html>



const obj1 = {};
const obj = new Object();

function print(person) {
    console.log(person.name);
    console.log(person.age);
}

const baby = { name: 'hong', age: 4 };
print(baby);

baby.hasJob = true;
console.log(baby.hasJob);

delete baby.hasJob;
console.log(baby.hasJob);


console.log(baby.name);
console.log(baby['name']);
baby['hasJob'] = true;
console.log(baby.hasJob);

function printValue(obj, key) {
console.log(obj[key]);
}
printValue(baby, 'name');
printValue(baby, 'age');

const person1 = { name: 'bob', age: 2 };
const person2 = { name: 'steve', age: 3 };
const person3 = { name: 'dave', age: 4 };
const person4 = new Person('baby', 30);
console.log(person4);

function Person(name, age) {
this.name = name;
this.age = age;
}

console.log('name' in baby);
console.log('age' in baby);
console.log('random' in baby);
console.log(baby.random);

for (let key in baby) {
console.log(key);
}

const array = [1, 2, 4, 5];
for (let value of array) {
console.log(value);
}

const user = { name: 'bob', age: '20' };
const user2 = user;
console.log(user);
user2.name = 'coder';
console.log(user);

const user3 = {};
for (let key in user) {
user3[key] = user[key];
}

console.clear();
console.log(user3);

const user4 = Object.assign({}, user);
console.log(user4);

const fruit1 = { color: 'red' };
const fruit2 = { color: 'blue', size: 'big' };
const mixed = Object.assign({}, fruit1, fruit2);
console.log(mixed.color); //같은 속성인 color : 'blue'가  color : 'red'를 덮어 쓴다.
console.log(mixed.size);
4교시

 객체값 접근


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

<p>Creating a JavaScript Object.</p>
<p id="demo"></p>
<script>
    let person = {
        firstName : "John",
        lastName  : "Doe",
        age       : 50,
        eyeColor  : "blue"
    };

        document.getElementById('demo').innerHTML =
        // `${person.firstName} is ${person.age}  years old.`;
        `${person['firstName']} is ${person['age']} years old`;
    </script>

</body>
</html>
 객체의 반복문 for ( key in obj)


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

<p>Creating a JavaScript Object.</p>
<p id="demo"></p>
<script>
    // 변수를 선언합니다.
    let person = {
        firstName : "John",
        lastName  : "Doe",
        age       : 50,
        eyeColor  : "blue"
    };

    let output = '';
    for (let key in person){
    output += `● ${key} : ${person[key]} <br>`;
    }

document.getElementById('demo').innerHTML = output;
</script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        let output = ''
        let student = {
            이름 :'연하진',
            국어 : 92,
            수학 : 98,
            영어 : 96,
            과학 : 98
        };

        let output2 = '';
        output2 += `이름: ${student.이름} \n`;
        output2 += `국어: ${student.국어} \n`;
        output2 += `수학: ${student.수학} \n`;
        output2 += `영어: ${student.영어} \n`;
        output2 += `과학: ${student.과학} \n`;
        output2 += `총점: ${(student.국어 + student.수학 + student.영어 + student.과학)} \n`;

        output += `이름 in student (${'이름' in student}) \n`;
        output += `성별 in student (${'성별' in student}) `;
        console.log(output);
        console.log(output2);

    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        let output = ''
        let student = {
            이름 :'연하진',
            국어 : 92,
            수학 : 98,
            영어 : 96,
            과학 : 98
        };

        let output3 = '';
            with(student){
        output3 += `이름: ${student.이름} \n`;
        output3 += `국어: ${student.국어} \n`;
        output3 += `수학: ${student.수학} \n`;
        output3 += `영어: ${student.영어} \n`;
        output3 += `과학: ${student.과학} \n`;
        output3 += `총점: ${(student.국어 + student.수학 + student.영어 + student.과학)} \n`;
        }
        console.log(output3);

    </script>
</body>
</html>
(4) push 함수를 사용하여 객체 생성
- 배열안에 객체를 하나씩 만들어 넣는다.
- 서로 다른 형태의 객체를 배열에 담는다.


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        let students = [];
        students.push({
            이름: '홍길동', 국어: 87,
            수학: 98, 영어: 88, 과학: 95,
            장래희망: '생명공학자'
        });
        students.push({
            이름: '김길순', 국어: 92,
            수학: 98, 영어: 96, 과학: 98,
            특기: '요리', 취미: '일렉 기타'
        });
        students.push({
            이름: '이길동', 국어: 76,
            수학: 96, 영어: 94, 과학: 90,
            장래희망: '프로그래머'
        });

        console.log(students);

    </script>
</head>
<body>
   
</body>
</html>


2. 속성과 메소드
- 배열 내부에 있는 값을 요소라고 하며, 객체 내부의 값을 속성이라 한다.
- 객체 속성중 기능 처리를 메서드라 부른다.
- 메소드 내에서 자신의 속성을 출력하고 싶을 때는 this 키워드를 사용한다.

<!DOCTYPE html>
<html lang="en">
<>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        // 변수를 선언합니다.
        var person = {
            name: '홍길동',
            eat: function (food) {
                alert(this.name + '이 ' + food + '을/를 먹습니다.');
            }
        };

        // 메서드를 호출합니다.
        person.eat('밥');
    </script>
<body>

</body>
</html>
3. 생성자 함수
- 클래스 없이 new를 사용하여 객체를 생성할 수 있다.
- new 키워드로 객체를 생성할 수 있는 함수를 의미한다.
- new 키워드 없이 객체를 생성하면 생성자 함수라 할 수 없다.
- this 키워드로 객체의 속성과 함수에 접근한다.
- 함수명을 대문자로 지정한다.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <p id="demo"></p>
 
<script>
function Person(first, last, age, eye) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
}
 
var myFather = new Person("John", "Doe", 50, "blue");
var myMother = new Person("Sally", "Rally", 48, "green");
 
document.getElementById("demo").innerHTML =
`My father is ${myFather.age}. My mother is ${myMother.age}`;
 
</script>
</body>
</html>
5교시

프로토 타입
- 프로토타입은 생성자함수로 생성된 객체가 공통으로 가지는 공간이다.
- 프로토타입을 사용하지 않고 메소드를 만들경우는 객체가 생성될때 마다
  속성과 메소드를 계속 만들어 메모리가 비효율적이 된다.


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <p id="demo"></p>
    <p id="demo2"></p>

<script>
function Person(first, last, age, eye) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
}
let myFather = new Person("John", "Doe", 50, "blue");
let myMother = new Person("Sally", "Rally", 48, "green");

Person.prototype.name = function() {
    return this.firstName + " " + this.lastName
};

document.getElementById("demo").innerHTML =
`My father is ${myFather.name()}`;

document.getElementById("demo2").innerHTML =
`My Mother is ${myMother.name()}`;
</script>
</body>
</html>
클래스 사용(ES6)
- 연관있는 메소드와 필드를 묶어 놓은것을 클래스라 한다.
- 객체를 만들 수 있는 틀(template)이다.
- 데이터가 들어있지 않다. 한번만 선언한다.


class Person{
    //constructor
    constructor(name, age){
        //fields
        this.name = name;
        this.age = age;
    }

    speak(){
        console.log(`${this.name}: hello! `);
    }
}

const hong = new Person('hong', 20);
console.log(hong.name)
console.log(hong.age);
hong.speak();
[1] 배열 
- 비슷한 종류의 데이터를 한곳에 담아 저장하는 것을 자료구조이다.
- 자료구조에서 인덱스가 지정된 영역이 이어져 있는 것을 배열이다.


const arr1 = new Array();
const arr2 = [1, 2];

const fruits = ['사과', '바나나'];
console.log(fruits);
console.log(fruits.length);
console.log(fruits[0]);
console.log(fruits[1]);
console.log(fruits[2]);
console.log(fruits[fruits.length - 1]);

const arr1 = new Array();
const arr2 = [1, 2];

const fruits = ['사과', '바나나'];
console.log(fruits);
console.log(fruits.length);
console.log(fruits[0]);
console.log(fruits[1]);
console.log(fruits[2]);
console.log(fruits[fruits.length - 1]);

for (let i = 0; i < fruits.length; i++) {
    console.log(fruits[i]);
}

for (let fruit of fruits) {
    console.log(fruit);
}

fruits.forEach((fruit) => console.log(fruit));

fruits.push('딸기', '복숭아');
console.log(fruits);

const poped = fruits.pop();
fruits.pop();
console.log(fruits);

fruits.unshift('딸기', '레몬');
console.log(fruits);

fruits.shift();
fruits.shift();
console.log(fruits);

fruits.push('딸기', '복숭아', '레몬');
console.log(fruits);
fruits.splice(1, 1);//1인덱스에서 삭제 갯수 지정, 지정하지 않으면 인덱스 이후 다지워짐
console.log(fruits);
fruits.splice(1, 0, '배', '수박'); //1인덱스에서 삭제 없이 배,수박 추가
console.log(fruits);

const fruits2 = ['메론', '배'];
const newFruits = fruits.concat(fruits2);
console.log(newFruits);

console.log(fruits);
console.log(fruits.indexOf('사과'));
console.log(fruits.indexOf('수박'));
console.log(fruits.indexOf('코코넛'));

console.log(fruits.includes('수박'));
console.log(fruits.includes('코코넛'));

fruits.push('사과');
console.log(fruits);
console.log(fruits.indexOf('사과'));
console.log(fruits.lastIndexOf('사과'));

console.log(fruits.lastIndexOf('코코넛'));
6교시

배열(Array) 생성 및 사용


- new Array() 생성자로 배열생성
- 한개의 요소만으로 배열생성시 undefined 발생

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <p>Avoid using new Array().</p>
 
    <p id="demo"></p>
     
    <script>
    var points = new Array(12);
    document.getElementById("demo").innerHTML = points[0];    
    </script>    
</script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <p>Avoid using new Array(). Use [] instead.</p>
 
<p id="demo"></p>
 
<script>
//var points = new Array(40);
var points = [40];
document.getElementById("demo").innerHTML = points[0];    
</script>
</body>
</html>
- 배열을 반복으로 사용


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
 
    <h1>JavaScript Arrays</h1>
 
    <p id="demo"></p>
     
    <script>
    var fruits, text, fLen, i;
     
    fruits = ["Banana", "Orange", "Apple", "Mango"];
    fLen = fruits.length;
    text = "<ul>";
    //for
    for (i = 0; i < fLen; i++) {
        text += "<li>" + fruits[i] + "</li>";
    }
    //for of
    for (let fruit of fruits){
          console.log(fruit);
    }
   
    //forEach
    fruits.forEach((fruit) => console.log(fruit));
    text += "</ul>";
    document.getElementById("demo").innerHTML = text;
    </script>
</body>
</html>

    const fruits = ['apple', 'banana', 'orange'];
    const result = fruits.join(',');
    console.log(result);

    const fruits2 = '사과, 키위, 바나나, 체리';
    const result2 = fruits2.split(',',2);
    console.log(result2);

    const array = [1, 2, 3, 4, 5];
    console.log(array);
    const result3 = array.reverse();
    console.log(array);
    console.log(result3);

    const array2 = [1, 2, 3, 4, 5];
    const result4 = array2.slice(2, 5);
    console.log(result4);
    console.log(array2);


7교시


class Student {
    constructor(name, age, enrolled, score) {
    this.name = name;
    this.age = age;
    this.enrolled = enrolled;
    this.score = score;
    }
    }
    const students = [
    new Student('A', 29, true, 45),
    new Student('B', 28, false, 80),
    new Student('C', 30, true, 90),
    new Student('D', 40, false, 66),
    new Student('E', 18, true, 88),
    ];
    const result5 = students.find((student) => student.score === 90);
    console.log(result5);
    const result6 = students.filter((student) => student.enrolled);
    console.log(result6);
    const result7 = students.map((student) => student.score * 2);
    console.log(result7);

    const result8 = students.some((student) => student.score < 50);
    console.log(result8);

    const result9 = !students.every((student) => student.score >= 50);
    console.log(result9);

    const result = students.reduce((prev, curr) => {
    console.log('--------------');
    console.log(prev);
    console.log(curr);
    return prev + curr.score;},0);

    const result2 = students
    .map((student) => student.score)
    .filter((score) => score >= 50) //점수가 50이상
    .join(); //배열을 문자열로 변환
    console.log(result);
       
    const result3 = students
    .map((student) => student.score)
    .sort((a, b) => a-b)
    .join();
    console.log(result);
배열 메소드

(1) toString() : 배열의 값을 comma로 구분된 하나의 String값으로 변환


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
<p>The toString() method returns an array as a comma separated string.</p>
 
<p id="demo"></p>
 
<script>
var fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();

</script>
</body>
</html>
(2)  join() : toString()와 같은 역할을 하지만 특별한 구분자를 사용할 수 있다.


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <p>the join() method joins array elements into a string.</p>
 
    <p id="demo"></p>
     
    <script>
    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo").innerHTML = fruits.join(" * ");

</script>
</body>
</html>
요소추가/삭제
- push() : push는 배열의 마지막 요소로 추가되며 추가후 배열의 길이를 가져옴
- pop() :  pop은 배열의 마지막 요소값을 삭제하며 삭제한 값을 가져옴

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <p>The push method returns the new array length.</p>
 
    <button onclick="myFunction()">Try it</button>
     
    <p id="demo"></p>
     
    <script>
    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo").innerHTML = fruits;
     
    function myFunction() {
        document.getElementById("demo").innerHTML = fruits.push("Kiwi");
    }
    </script>

</script>
</body>
</html>
8교시



-  unshift()는 배열의 첫번째 요소에 값을 추가하며 배열의 길이를 리턴
-  shift()는 배열 첫번째 요소값을 제거하며 제거된 값을 가져온다.
-  요소를 추가/삭제 할 때 마다 기존 자리를 변경해야 하므로 시간이 걸린다.


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <button onclick="myFunction()">Try it</button>
 
    <p id="demo"></p>
     
    <script>
    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo").innerHTML = fruits;
     
    function myFunction() {
        document.getElementById("demo").innerHTML = fruits.unshift("Lemon");
    }
    </script>

</script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <button onclick="myFunction()">Try it</button>
 
    <p id="demo"></p>
     
    <script>
    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo").innerHTML = fruits;
     
    function myFunction() {
        document.getElementById("demo").innerHTML = fruits.shift();
    }
    </script>

</script>
</body>
</html>
- 배열 요소값 추가


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <button onclick="myFunction()">Try it</button>
 
    <p id="demo"></p>
     
    <script>
    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo").innerHTML = fruits;
     
    function myFunction() {
        fruits[fruits.length] = "Kiwi";
        document.getElementById("demo").innerHTML = fruits;
    }
    </script>

</script>
</body>
</html>
- splice() : item을 지정된 위치에서 지운다.
- splice(start:number, deleteCount?:number, 추가될 요소값:string[]) :string[]
  deleteCount? 옵션으로 생략가능,  생략하면 추가될 요소가 하나 지워진다.


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <p>The splice() method adds new elements to an array.</p>
 
    <button onclick="myFunction()">Try it</button>
     
    <p id="demo"></p>
     
    <script>
    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo").innerHTML = fruits;
     
    function myFunction() {
        fruits.splice(2, 0, "Lemon", "Kiwi");
        document.getElementById("demo").innerHTML = fruits;
    }
    </script>

</script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <p>The splice() methods can be used to remove array elements.</p>
 
    <button onclick="myFunction()">Try it</button>
     
    <p id="demo"></p>
     
    <script>
    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo").innerHTML = fruits;
    function myFunction() {
        fruits.splice(0, 1);
        document.getElementById("demo").innerHTML = fruits;
    }
    </script>

</script>
</body>
</html>
concat() : 두개 또는 이상의 배열을 연결해서 새로운 배열을 만들어냄


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Joining Two Arrays</h1>
 
<p id="demo"></p>
 
<script>
var myGirls = ["Cecilie", "Lone"];
var myBoys = ["Emil", "Tobias", "Linus"];
var myChildren = myGirls.concat(myBoys);
 
document.getElementById("demo").innerHTML = myChildren;
</script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Joining Three Arrays</h1>
 
    <p id="demo"></p>
     
    <script>
    var arr1 = ["Cecilie", "Lone"];
    var arr2 = ["Emil", "Tobias", "Linus"];
    var arr3 = ["Robin", "Morgan"];
     
    var myChildren = arr1.concat(arr2, arr3);
     
    document.getElementById("demo").innerHTML = myChildren;
    </script>
</body>
</html>
slice()

- slice() :기존 배열에서 잘라내서 새로운 배열로 만들어냄
  slice(시작인덱스,끝인덱스(포함되지 않음))


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>JavaScript slice()</h1>
 
<p>This  example slices out a part of an array starting from array element 3 ("Apple")</p>
 
<p id="demo"></p>
 
<script>
var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(3);
document.getElementById("demo").innerHTML = fruits + "<br>" + citrus;
</script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <p>When the slice() method is given two arguments, it selects array elements from the start argument, and up to (but not included) the end argument:</p>
 
    <p id="demo"></p>
     
    <script>
    var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
    var citrus = fruits.slice(1,3);
    document.getElementById("demo").innerHTML = fruits + "<br>" + citrus;
    </script>

</body>
</html>
배열 정렬

 - sort() : 오름차순으로 정렬해줌


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
   
    <p>The sort() method sorts an array alphabetically.</p>
 
<button onclick="myFunction()">Try it</button>
 
<p id="demo"></p>
 
<script>
var fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits;
 
function myFunction() {
    fruits.sort();
    document.getElementById("demo").innerHTML = fruits;
}
</script>

</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
   
    <p>The sort() method sorts an array alphabetically.</p>
 
    <button onclick="myFunction()">Try it</button>
     
    <p id="demo"></p>
     
    <script>
    var fruits = [1, 8, 5, 4];
    document.getElementById("demo").innerHTML = fruits;
     
    function myFunction() {//숫자인경우의 오름차순 sort
        fruits.sort(function(a,b){return a-b});//내림차순 b-a
        document.getElementById("demo").innerHTML = fruits;
    }
    </script>

</body>
</html>
- reverse() 현재의 배열 순서를 반대로 바꿔준다.
- 내림차순을 하고자 한다면 sort()한후 reverse하면 내림차순으로 정렬할 수 있다.


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
   
    <p>The sort() method sorts an array alphabetically.</p>
 
    <button onclick="myFunction()">Try it</button>
     
    <p id="demo"></p>
     
    <script>
    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    document.getElementById("demo").innerHTML = fruits;
     
    function myFunction() {
        fruits.sort();
        fruits.reverse();
        document.getElementById("demo").innerHTML = fruits;
    }
    </script>

</body>
</html>
