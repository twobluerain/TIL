
1. 뷰 생성
- member table의 내용을 검색한다


USE market_db;
SELECT mem_id, mem_name, addr FROM member;
 
- 뷰 생성한다.

USE market_db;

CREATE VIEW v_member
AS
    SELECT mem_id, mem_name, addr FROM member;
 
SELECT * FROM v_member;

SELECT mem_name, addr FROM v_member
   WHERE addr IN ('서울', '경기');
 
2. 뷰 작동
- 사용자가 뷰를 조회하면 뷰안에 있는 select문이 실행해서 그 결과를 사용자에게 보여준다.

3. 뷰를 사용하는 이유는 
- 보안에 도움이 된다, 테이블의 내용을 다 보여주지 않을 수 있다.
- 조인 처럼 복잡한 SQL문을 단순하게 만들 수 있다.



SELECT B.mem_id, M.mem_name, B.prod_name, M.addr, 
 

        CONCAT(M.phone1, M.phone2) '연락처' 
   FROM buy B
     INNER JOIN member M
     ON B.mem_id = M.mem_id;
 
CREATE VIEW v_memberbuy
AS
    SELECT B.mem_id, M.mem_name, B.prod_name, M.addr, 
            CONCAT(M.phone1, M.phone2) '연락처' 
       FROM buy B
         INNER JOIN member M
         ON B.mem_id = M.mem_id;
 
SELECT * FROM v_memberbuy WHERE mem_name = '블랙핑크';

교시

4. 뷰 생성, 수정 삭제
- 뷰를 생성할 때 열이름을 테이블과 다르게 지정할 수도 있다.
  별칭을 사용하고 중간 띄어쓰기도 할 수 있다. 
- 뷰를 조회할 때 열 이름에 공백이 있으면 백틱(`)으로 묶어준다.

USE market_db;

CREATE VIEW v_viewtest1
AS
    SELECT B.mem_id 'Member ID', M.mem_name AS 'Member Name', 
            B.prod_name "Product Name", 
            CONCAT(M.phone1, M.phone2) AS "Office Phone" 
       FROM buy B
         INNER JOIN member M
         ON B.mem_id = M.mem_id;
         
SELECT  DISTINCT `Member ID`, `Member Name` FROM v_viewtest1; -- 백틱을 사용
- 뷰의 수정은 alter view 구문을 사용하며 열이름에 한글을 사용해도 된다.


ALTER VIEW v_viewtest1
AS
    SELECT B.mem_id '회원 아이디', M.mem_name AS '회원 이름', 
            B.prod_name "제품 이름", 
            CONCAT(M.phone1, M.phone2) AS "연락처" 
       FROM buy B
         INNER JOIN member M
         ON B.mem_id = M.mem_id;
SELECT  DISTINCT `회원 아이디`, `회원 이름` FROM v_viewtest1;  -- 백틱을 사용
- 뷰의 삭제는 drop view를 사용한다.
DROP VIEW v_viewtest1;

- 기존 뷰의 정보 describe 문으로 확인한다.


USE market_db;
CREATE OR REPLACE VIEW v_viewtest2
AS
    SELECT mem_id, mem_name, addr FROM member;
 
DESCRIBE v_viewtest2;

- show create vew문으로 뷰의 소드 코드도 확인할 수 있다.
  [Form Editor]창에서 확인한다.
 

2교시

JAVA, MySQL 연동 실습


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
package MySQL;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
 
public class DriverTestMySQL {
 
  public static void main(String[] args) {
 
    Connection con = null;
    String url = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
    String user = "javauser";
    String passwd = "1234";
    try {
      Class.forName("com.mysql.cj.jdbc.Driver");
      
      con = DriverManager.getConnection(url,user,passwd);
      
      System.out.println("데이터베이스 접속이 성공했습니다.");
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (SQLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } finally {
     try {
     if(con !=null) con.close();
    } catch (SQLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    }
    
  }
 
}
 
 
 

2. 실습용 테이블의 생성 


       use javadb;
       CREATE TABLE address( 
         addressnum INT                NOT NULL AUTO_INCREMENT PRIMARY KEY, -- 번호 
         name         VARCHAR(10)     NULL , -- 이름 
         handphone  VARCHAR(14)     NULL , -- 핸드폰번호 
         address      VARCHAR(50)     NULL   -- 주소 
     ); 
      
    INSERT INTO address(name, handphone, address)  
    VALUES('개발자1', '000-123-1234', '대한민국'); 
    INSERT INTO address(name, handphone, address)  
    VALUES('개발자2', '111-123-1234', '일본'); 
    INSERT INTO address(name, handphone, address)  
    VALUES('개발자3', '222-123-1234', '러시아'); 
     
    SELECT addressnum, name, handphone, address  
    FROM address; 
   
    SELECT addressnum, name, handphone, address  
    FROM address WHERE addressnum=1;  
     
    UPDATE address  
    SET handphone='555-555-5555', address='터키'  
    WHERE addressnum=1;  

    DELETE FROM address WHERE addressnum=3; 
     
    SELECT addressnum, name, handphone, address  
    FROM address ORDER BY name DESC; -- 오름차순은 ASC 
    
    DELETE FROM address; 
     

 

3교시

3. 레코드를 추가하는 소스 


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
package MySQL;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
 
public class InsertDB {
 
  public static void main(String[] args) {
    String url = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
    String user = "javauser";
    String passwd = "1234";
    String driver = "com.mysql.cj.jdbc.Driver";
 
    Connection con = null; // DB 연결 객체
    Statement stmt = null; // java.sql.Statement, SQL 전송 객체
 
    try {
      Class.forName(driver);
      con = DriverManager.getConnection(url, user, passwd);
      stmt = con.createStatement();
 
      StringBuffer sql = new StringBuffer();
      sql.append("  INSERT INTO address(name, handphone, address)  ");
      sql.append("  VALUES('개발자1', '000-123-1234', '대한민국')  ");
      
      int cnt = stmt.executeUpdate(sql.toString());
      System.out.println("새로운 레코드" + cnt + " 개가 추가 되었습니다.");
      
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } finally{ 
      try{ 
          if ( stmt != null){ stmt.close(); } 
      }catch(Exception e){} 
      try{ 
          if ( con != null){ con.close(); } 
      }catch(Exception e){} 
      }
    }
 
  }
 
 
 
 
 
4. 하나의 레코드 출력 


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
package MySQL;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
 
public class SelectDBOne {
 
  public static void main(String[] args) {
    String url = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
    String user = "javauser";
    String passwd = "1234";
    String driver = "com.mysql.cj.jdbc.Driver";
 
    Connection con = null; // DB 연결 객체
    Statement stmt = null; // java.sql.Statement, SQL 전송 객체
    ResultSet rs = null; // DQL의 결과를 받는 객체
 
    try {
      Class.forName(driver);
      con = DriverManager.getConnection(url, user, passwd);
      stmt = con.createStatement();
 
      StringBuffer sql = new StringBuffer();
      sql.append("  SELECT addressnum, name, handphone, address  ");
      sql.append("  FROM address  ");
      sql.append("  WHERE addressnum = 4  ");
 
      rs = stmt.executeQuery(sql.toString());
 
      if (rs.next()) {
        int addressnum = rs.getInt(1);
        String name = rs.getString(2);
        String handphone = rs.getString("handphone");
        String address = rs.getString("address");
        System.out.println("번호 : " + addressnum);
        System.out.println("성명 : " + name);
        System.out.println("전화번호 : " + handphone);
        System.out.println("주소 : " + address);
      }
 
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      try {
        if (rs != null)
          stmt.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      try {
        if (con != null)
          con.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
    }
 
  }
 
}
 
 
 
 

 

4교시

5. 전체 레코드 목록 출력


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
package MySQL;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
 
public class SelectDB {
 
  public static void main(String[] args) {
    String url = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
    String user = "javauser";
    String passwd = "1234";
    String driver = "com.mysql.cj.jdbc.Driver";
 
    Connection con = null; // DB 연결 객체
    Statement stmt = null; // java.sql.Statement, SQL 전송 객체
    ResultSet rs = null; // DQL의 결과를 받는 객체
 
    try {
      Class.forName(driver);
      con = DriverManager.getConnection(url, user, passwd);
      stmt = con.createStatement();
 
      StringBuffer sql = new StringBuffer();
      sql.append("  SELECT addressnum, name, handphone, address  ");
      sql.append("  FROM address  ");
      sql.append("  order by name desc  ");
 
      rs = stmt.executeQuery(sql.toString());
      while (rs.next()) {
        int addressnum = rs.getInt(1);
        String name = rs.getString(2);
        String handphone = rs.getString(3);
        String address = rs.getString(4);
        System.out.println("번호 : " + addressnum);
        System.out.println("성명 : " + name);
        System.out.println("전화번호 : " + handphone);
        System.out.println("주소 : " + address);
        System.out.println("--------------------");
      }
 
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
 
      try {
        if (stmt != null)
          stmt.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
 
      try {
        if (con != null)
          con.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
 
    }
 
  }
 
}
 
 
 

6. 레코드를 수정하는 소스


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
package MySQL;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
 
public class UpdateDB {
 
  public static void main(String[] args) {
    String url = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
    String user = "javauser";
    String passwd = "1234";
    String driver = "com.mysql.cj.jdbc.Driver";
 
    Connection con = null; // DB 연결 객체
    Statement stmt = null; // java.sql.Statement, SQL 전송 객체
    
    try {
      Class.forName(driver);
      
      con = DriverManager.getConnection(url, user, passwd);
      stmt = con.createStatement();
      StringBuffer sql = new StringBuffer();
      sql.append("  UPDATE address  ");
      sql.append("  SET handphone='555-555-5555',  ");
      sql.append("  address='터키'  ");
      sql.append("  WHERE addressnum = 9  ");
      
      int cnt = stmt.executeUpdate(sql.toString());
      System.out.println("레코드 " + cnt + " 개가 수정되었습니다.");
      
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } finally {
      try {
        if(stmt != null) stmt.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      try {
        if(con != null) con.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      
    }
  }
 
}
 
 
 


7. 레코드를 삭제하는 소스


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
package MySQL;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
 
public class DeleteDB {
 
  public static void main(String[] args) {
    String url = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
    String user = "javauser";
    String passwd = "1234";
    String driver = "com.mysql.cj.jdbc.Driver";
 
    Connection con = null; // DB 연결 객체
    Statement stmt = null; // java.sql.Statement, SQL 전송 객체
    
    
    try {
      Class.forName(driver);
      con = DriverManager.getConnection(url, user, passwd);
      stmt = con.createStatement();
      
      StringBuffer sql = new StringBuffer();
      sql.append("  DELETE FROM address   ");
      sql.append("  WHERE addressnum=9   ");
      
      int cnt = stmt.executeUpdate(sql.toString());
      System.out.println("레코드 " + cnt + " 개가 삭제 되었습니다.");
      
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } finally {
      try {
        if ( stmt != null) stmt.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      try {
        if (con != null) con.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
    }
  }
 
}
 
 
 


PreparedStatement 클래스의 사용 

    - 자바에서 보낸 쿼리가 데이터베이스의 캐시 영역에 컴파일되어 저장되어 있음으로  
      같은 쿼리를 실행시 빠른 처리속도를 지원한다. 
    - 10000개의 레코드 추가시 Statement 클래스 보다 처리속도 약 13초 빠름 
    - 간결하고 구조적인 쿼리문 작성 가능 
    - 반복해서 같은 쿼리를 보낼 경우 효과가 큼 
    - SQL injection 해킹을 방어할 수 있다.
 
 
5교시


※ SQL injection

---------------------------------------------------------------
CREATE TABLE member( 
    id   varchar(10) NOT NULL  PRIMARY KEY,
  mname   VARCHAR(30)     NULL , 
  passwd  VARCHAR(14)     NULL 
 
 );  
 
INSERT INTO member(id, mname, passwd)  
VALUES('user1', '개발자1', '1234'); 
INSERT INTO member(id, mname, passwd)  
VALUES('user2', '개발자2', '1234'); 
INSERT INTO member(id, mname, passwd)  
VALUES('user3', '개발자3', '1234'); 
 
-- 모든 회원수
SELECT COUNT(id) as cnt 
FROM member;
 
- 로그인 처리
SELECT COUNT(id) as cnt 
FROM member 
WHERE id = 'user4' AND passwd = '1234';  
 
-- 비회원도 인증 통과 
SELECT COUNT(id) as cnt 
FROM member 
WHERE id = 'user4' or 'a' = 'a' AND passwd = '1234' or 'a' = 'a';  
 
-- 모든 회원의 정보 출력 
SELECT id, passwd, mname 
FROM member 
WHERE id = 'user10' or 'a' = 'a' AND passwd = '1111' or 'a' = 'a';  
1. SELECT의 이용 
>>>>> SelectPrepDB.java 
package test; 
import java.sql.Connection; 
import java.sql.DriverManager; 
import java.sql.PreparedStatement; 
import java.sql.ResultSet; 
import java.sql.SQLException; 

public class SelectPrepDB { 
    public static void main(String args[]) { 
        String url = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
         Connection con=null; 
        PreparedStatement  pstmt=null; 
        ResultSet rs=null; 
        try { 
            Class.forName("com.mysql.cj.jdbc.Driver"); 
        } catch(java.lang.ClassNotFoundException e) { 
            System.err.print("ClassNotFoundException: "); 
            System.err.println(e.getMessage()); 
        }    
        try { 
            //커넥션 연결 
            con = DriverManager.getConnection(url,"javauser", "1234"); 
            String sql = "SELECT addressnum, name, handphone, address "; 
            sql = sql + " FROM address WHERE addressnum = ?"; 
            //쿼리 지정  
            pstmt = con.prepareStatement(sql); 
            //(물음표의 순번, 적용할 값) 
            //문자열 지정 pstmt.setString(....) 
            //첫번째 ?표에 값 6을 지정 
            pstmt.setInt(1, 6);  
            rs = pstmt.executeQuery(); 
            while(rs.next()){ 
                System.out.println("번호: " + rs.getInt("addressnum")); 
                System.out.println("성명: " + rs.getString("name")); 
                System.out.println("전화번호: " + rs.getString("handphone")); 
                System.out.println("주소: " + rs.getString("address")); 
                System.out.println("-------------------------------------"); 
            } 
         } catch(SQLException e) { 
            System.out.println("SQLException: " + e.getMessage()); 
        } finally{ 
            try{ 
                if ( rs != null){ rs.close(); } 
            }catch(Exception e){} 
            try{ 
                if ( pstmt != null){ pstmt.close(); } 
            }catch(Exception e){} 
            try{ 
                if ( con != null){ con.close(); } 
            }catch(Exception e){} 
        } 
    } 
} 

 

2. INSERT의 이용 
 - statementd의 PreparedStatement로의 변경 

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
package MySQL;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
 
public class InsertPrepDB {
 
  public static void main(String[] args) {
    String url = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
    String user = "javauser";
    String passwd = "1234";
    String driver = "com.mysql.cj.jdbc.Driver";
 
    Connection con = null; // db 연결 객체
    PreparedStatement pstmt = null;
    StringBuffer sql = new StringBuffer();
    sql.append("  INSERT INTO address(name, handphone, address)  ");
    sql.append("  VALUES(?,?,?)  ");
 
    try {
      Class.forName(driver);
      con = DriverManager.getConnection(url, user, passwd);
      pstmt = con.prepareStatement(sql.toString());
 
      pstmt.setString(1, "홍길동");
      pstmt.setString(2, "010-1234-5678");
      pstmt.setString(3, "서울시 강남구");
      
      int cnt = pstmt.executeUpdate();
      System.out.println("레코드 " + cnt + "개가 추가 되었습니다.");
 
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } finally {
      try {
        if ( pstmt != null) pstmt.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      try {
        if(con != null) con.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      
    }
 
  }
 
}
 
 
 



>>>>> InsertPrepDB.java  
package test; 
import java.sql.Connection; 
import java.sql.DriverManager; 
import java.sql.PreparedStatement; 
//import java.sql.ResultSet; 
import java.sql.SQLException; 
public class InsertPrepDB { 
    public static void main(String args[]) { 
String url = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
         Connection con=null; 
        PreparedStatement  pstmt=null; 
        //ResultSet rs=null; 
        try { 
            Class.forName("com.mysql.cj.jdbc.Driver"); 
        } catch(java.lang.ClassNotFoundException e) { 
            System.err.print("ClassNotFoundException: "); 
            System.err.println(e.getMessage()); 
        }    
        try { 
            //커넥션 연결 
            con = DriverManager.getConnection(url,"javauser", "1234"); 
            String sql = "INSERT INTO address(name, handphone, address) "; 
            sql = sql + " VALUES(?,?,?)"; 
            //쿼리 지정  
            pstmt = con.prepareStatement(sql); 
            //(물음표의 순번, 적용할 값) 
            pstmt.setString(1, "개발자9"); 
            pstmt.setString(2, "999-9999-9999"); 
            pstmt.setString(3, "베트남"); 

            int ret = pstmt.executeUpdate(); 

            System.out.println("레코드 " + ret + "개가 추가 되었습니다."); 
             
        } catch(SQLException e) { 
            System.out.println("SQLException: " + e.getMessage()); 
        } finally{ 
            try{ 
                if ( pstmt != null){ pstmt.close(); } 
            }catch(Exception e){} 
            try{ 
                if ( con != null){ con.close(); } 
            }catch(Exception e){} 
        } 
    } 

} 

 

6교시

preparedstatement list

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
package MySQL;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
 
public class SelectPrepList {
 
  public static void main(String[] args) {
    String url = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
    String user = "javauser";
    String passwd = "1234";
    String driver = "com.mysql.cj.jdbc.Driver";
    Connection con = null; //DB 연결 객체
    PreparedStatement pstmt = null;//SQL 전송 객체
    ResultSet rs = null;
    StringBuffer sql = new StringBuffer();
    sql.append(" select addressnum, name, handphone, address ");
    sql.append(" from address ");
    sql.append(" order by name desc ");
 
    try {
      Class.forName(driver);
      con = DriverManager.getConnection(url, user, passwd);
      pstmt = con.prepareStatement(sql.toString());
      
      rs = pstmt.executeQuery();
      
      while(rs.next()) {//
        int addressnum = rs.getInt(1);
        String name = rs.getString(2);
        String handphone = rs.getString(3);
        String address = rs.getString(4);
        
        System.out.println("번호: "+addressnum);
        System.out.println("이름: "+name);
        System.out.println("전화번호: "+handphone);
        System.out.println("주소: "+address);
        System.out.println("-------------------");      
      }
      
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } finally {
      try {
        if(rs!=null) rs.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      try {
        if(pstmt!=null) pstmt.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      try {
        if(con!=null) con.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }      
    }
  }
}
 
 

preparedstatement update

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
package MySQL;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
 
 
public class UpdatePrep {
 
  public static void main(String[] args) {
 
    String url = "jdbc:mysql://127.0.0.1:3306/javadb?useUnicode=true&characterEncoding=utf8";
    String user = "javauser";
    String passwd = "1234";
    String driver ="com.mysql.cj.jdbc.Driver";
preparedstatement 전체 리스트
    Connection con = null; //DB연결객체
    PreparedStatement pstmt = null; //sql전송객체
    
    StringBuffer sql = new StringBuffer();
    sql.append("  INSERT INTO address(name, handphone, address)  ");
    sql.append("  VALUES(?,?,?)  ");
 
    try {
      Class.forName(driver);
      con = DriverManager.getConnection(url, user, passwd);
      pstmt = con.prepareStatement(sql.toString());
 
      pstmt.setString(1, "홍길동");
      pstmt.setString(2, "010-1234-5678");
      pstmt.setString(3, "서울시 강남구");
      
      int cnt = pstmt.executeUpdate();
      System.out.println("레코드"+cnt+"개가 추가되었습니다");
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }finally {
      try {
        if(pstmt != null) pstmt.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }try {
        if(con != null) con.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
    }
  }
 
}
 
 


preparedstatement delete

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
package MySQL;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
 
public class DeletePrep {
 
  public static void main(String[] args) {
    String url = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
    String user = "javauser";
    String passwd = "1234";
    String driver = "com.mysql.cj.jdbc.Driver";
 
    Connection con = null; // DB 연결 객체
    PreparedStatement pstmt = null; // java.sql.Statement, SQL 전송 객체
    
    try {
      StringBuffer sql = new StringBuffer();
      sql.append("  DELETE FROM address   ");
      sql.append("  WHERE addressnum=10   ");
      
      Class.forName(driver);
      con = DriverManager.getConnection(url, user, passwd);
      pstmt = con.prepareStatement(sql.toString());
      
      
      int cnt = pstmt.executeUpdate(sql.toString());
      System.out.println("레코드 " + cnt + " 개가 삭제 되었습니다.");
      
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } finally {
      try {
        if ( pstmt != null) pstmt.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      try {
        if (con != null) con.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
    }
  }
 
}
 

7교시

DB open 클래스 작성

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
package utility;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
 
public class DBOpen {
 
  private static Connection con;
 
  public static Connection getConnection() {
 
    try {
      Class.forName(Constant.DRIVER);
      con = DriverManager.getConnection(Constant.URL, Constant.USER, Constant.PASSWD);
 
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (SQLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
 
    return con;
  }
 
}
 
 
Constant 클래스 작성

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
package utility;
 
import java.sql.SQLException;
 
public class Constant {
 
  public static final String URL = "com.mysql.cj.jdbc.Driver";
  public static final String DRIVER = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
  public static final String USER = "javauser";
  public static final String PASSWD = "1234";
 
  public static void main(String[] args) {
    // TODO Auto-generated method stub
 
}
}
 
 
DB close 클래스 작성

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
package utility;
 
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
 
public class DBClose {
  public static void close(Connection con) {
    try {
      if(con!=null)con.close();
    } catch (SQLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
  }
  public static void close(PreparedStatement pstmt, Connection con) {
    try {
      if(pstmt!=null)pstmt.close();
    } catch (SQLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    
    try {
      if(con!=null)con.close();
    } catch (SQLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
  }
  public static void close(ResultSet rs, PreparedStatement pstmt, Connection con) {
    try {
      if(rs!=null)rs.close();
    } catch (SQLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    
    try {
      if(pstmt!=null)pstmt.close();
    } catch (SQLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    
    try {
      if(con!=null)con.close();
    } catch (SQLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
  }
 
}
 
 
 
 

 

 

8교시

DTO 작성

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
package address;
 
public class AddressDTO {
 
    private int addressnum    ;
    private String name       ;
    private String handphone  ;
    private String address    ;
    
  public AddressDTO() {}
  public AddressDTO(int addressnum, String name, String handphone, String address) {
    super();
    
    this.addressnum = addressnum;
    this.name = name;
    this.handphone = handphone;
    this.address = address;
  }
  @Override
  public String toString() {
    return "AddressDTO [addressnum=" + addressnum + ", name=" + name + ", handphone=" + handphone + ", address="
        + address + "]";
  }
  public int getAddressnum() {
    return addressnum;
  }
  public void setAddressnum(int addressnum) {
    this.addressnum = addressnum;
  }
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public String getHandphone() {
    return handphone;
  }
  public void setHandphone(String handphone) {
    this.handphone = handphone;
  }
  public String getAddress() {
    return address;
  }
  public void setAddress(String address) {
    this.address = address;
  }
 
}
 
 
 
 

DAO 작성

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
package address;
 
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
 
import utility.DBClose;
import utility.DBOpen;
 
public class AddressDAO {
 
  
  /**
   * db에서 여러 건의 데이터를 가져온다.(DQL)
   * @return 여러 건의 레코드 
   */
  public List<AddressDTO> list(){
    List<AddressDTO> list = new ArrayList<AddressDTO>();
    Connection con = DBOpen.getConnection();
    PreparedStatement pstmt = null;
    ResultSet rs = null;
    
    StringBuffer sql = new StringBuffer();
    sql.append("  SELECT addressnum, name, handphone, address  ");
    sql.append("  FROM address  ");
    sql.append("  order by name desc  ");
    
    
    try {
      pstmt = con.prepareStatement(sql.toString());
      rs = pstmt.executeQuery();
      while(rs.next()) {
        AddressDTO dto = new AddressDTO();
        dto.setAddressnum(rs.getInt("addressnum"));
        dto.setName(rs.getString("name"));
        dto.setHandphone(rs.getString("handphone"));
        dto.setAddress(rs.getString("address"));
        
        list.add(dto); // DTO에 저장한 데이터 list에 저장
      }
      
      
    } catch (SQLException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }finally {
      DBClose.close(rs, pstmt, con);
    }
    
    return list;
  }
 }
 
 
 
Address 작성

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
package MySQL;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
 
public class SelectDB {
 
  public static void main(String[] args) {
    String url = "jdbc:mysql://localhost:3306/javadb?useUnicode=true&characterEncoding=utf8";
    String user = "javauser";
    String passwd = "1234";
    String driver = "com.mysql.cj.jdbc.Driver";
 
    Connection con = null; // DB 연결 객체
    Statement stmt = null; // java.sql.Statement, SQL 전송 객체
    ResultSet rs = null; // DQL의 결과를 받는 객체
 
    try {
      Class.forName(driver);
      con = DriverManager.getConnection(url, user, passwd);
      stmt = con.createStatement();
 
      StringBuffer sql = new StringBuffer();
      sql.append("  SELECT addressnum, name, handphone, address  ");
      sql.append("  FROM address  ");
      sql.append("  order by name desc  ");
 
      rs = stmt.executeQuery(sql.toString());
      while (rs.next()) {
        int addressnum = rs.getInt(1);
        String name = rs.getString(2);
        String handphone = rs.getString(3);
        String address = rs.getString(4);
        System.out.println("번호 : " + addressnum);
        System.out.println("성명 : " + name);
        System.out.println("전화번호 : " + handphone);
        System.out.println("주소 : " + address);
        System.out.println("--------------------");
      }
 
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } finally {
      try {
        if (rs != null)
          rs.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
 
      try {
        if (stmt != null)
          stmt.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
 
      try {
        if (con != null)
          con.close();
      } catch (SQLException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
 
    }
 
  }
 
}
 
 
 

MySQL에서 확인한 테이블


 

STS에서 확인한 값

